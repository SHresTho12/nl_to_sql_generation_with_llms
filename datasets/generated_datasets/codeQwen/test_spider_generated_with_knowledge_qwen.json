[
    {
        "question": "How many clubs are there?",
        "knowledge": {
            "club": {
                "columns": [
                    "Club_ID"
                ],
                "aggregation": "COUNT",
                "derivation": "Count the number of rows in the 'club' table."
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of rows in the 'club' table."
        ],
        "db_id": "soccer_3",
        "id": 0,
        "generated_sql": "SELECT COUNT(*) FROM club"
    },
    {
        "question": "Count the number of clubs.",
        "knowledge": {
            "club": {
                "columns": [
                    "Club_ID"
                ],
                "aggregation": "COUNT",
                "derivation": "Count the number of rows in the 'club' table."
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of rows in the 'club' table."
        ],
        "db_id": "soccer_3",
        "id": 1,
        "generated_sql": "SELECT COUNT(*) FROM club"
    },
    {
        "question": "List the name of clubs in ascending alphabetical order.",
        "knowledge": {
            "club": {
                "columns": [
                    "Name"
                ],
                "order": "ascending",
                "derivation": "Retrieve the names of clubs from the 'club' table and sort them in ascending alphabetical order."
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the names of clubs from the 'club' table.",
            "Sort the names in ascending alphabetical order."
        ],
        "db_id": "soccer_3",
        "id": 2,
        "generated_sql": "SELECT Name FROM club ORDER BY Name ASC"
    },
    {
        "question": "What are the names of clubs, ordered alphabetically?",
        "knowledge": {
            "club": {
                "columns": [
                    "Name"
                ],
                "order": "alphabetically",
                "derivation": "Retrieve the names of clubs from the 'club' table and order them alphabetically."
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the names of clubs from the 'club' table.",
            "Order the names alphabetically."
        ],
        "db_id": "soccer_3",
        "id": 3,
        "generated_sql": "SELECT Name FROM club ORDER BY Name ASC"
    },
    {
        "question": "What are the managers and captains of clubs?",
        "knowledge": {
            "club": {
                "columns": [
                    "Manager",
                    "Captain"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the managers and captains from the 'club' table."
        ],
        "db_id": "soccer_3",
        "id": 4,
        "generated_sql": "SELECT Manager, Captain FROM club"
    },
    {
        "question": "Return the managers and captains of all clubs.",
        "knowledge": {
            "club": {
                "columns": [
                    "Manager",
                    "Captain"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Manager' and 'Captain' columns from the 'club' table."
        ],
        "db_id": "soccer_3",
        "id": 5,
        "generated_sql": "SELECT Manager, Captain FROM club"
    },
    {
        "question": "List the name of clubs whose manufacturer is not 'Nike'.",
        "knowledge": {
            "club": {
                "columns": [
                    "Name"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Name' column from the 'club' table where the 'Manufacturer' is not 'Nike'."
        ],
        "db_id": "soccer_3",
        "id": 6,
        "generated_sql": "SELECT Name FROM club WHERE Manufacturer != 'Nike'"
    },
    {
        "question": "What are the names of clubs who do not have the manufacturer Nike?",
        "knowledge": {
            "club": {
                "columns": [
                    "Name"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Name' column from the 'club' table where the 'Manufacturer' is not 'Nike'."
        ],
        "db_id": "soccer_3",
        "id": 7,
        "generated_sql": "SELECT Name FROM club WHERE Manufacturer <> 'Nike'"
    },
    {
        "question": "What are the names of players in ascending order of wins count?",
        "knowledge": {
            "player": {
                "columns": [
                    "Name",
                    "Wins_count"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Name' column from the 'player' table, sorted in ascending order based on the 'Wins_count' column."
        ],
        "db_id": "soccer_3",
        "id": 8,
        "generated_sql": "SELECT Name FROM player ORDER BY Wins_count ASC"
    },
    {
        "question": "Return the names of players in order of count of wins, ascending.",
        "knowledge": {
            "player": {
                "columns": [
                    "Name",
                    "Wins_count"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Name' column from the 'player' table, sorted in ascending order based on the 'Wins_count' column."
        ],
        "db_id": "soccer_3",
        "id": 9,
        "generated_sql": "SELECT Name FROM player ORDER BY Wins_count ASC"
    },
    {
        "question": "What is the name of the player with the highest earnings?",
        "knowledge": {
            "player": {
                "columns": [
                    "Name",
                    "Earnings"
                ],
                "aggregation": {
                    "function": "MAX",
                    "column": "Earnings"
                }
            }
        },
        "label": "simple",
        "steps": [
            "Find the maximum value of 'Earnings' column in the 'player' table.",
            "Retrieve the 'Name' of the player who has the highest earnings."
        ],
        "db_id": "soccer_3",
        "id": 10,
        "generated_sql": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "question": "Return the name of the player who earns the most money.",
        "knowledge": {
            "player": {
                "columns": [
                    "Name",
                    "Earnings"
                ],
                "aggregation": {
                    "function": "MAX",
                    "column": "Earnings"
                }
            }
        },
        "label": "simple",
        "steps": [
            "Find the maximum value of 'Earnings' column in the 'player' table.",
            "Retrieve the 'Name' of the player who earns the most money."
        ],
        "db_id": "soccer_3",
        "id": 11,
        "generated_sql": "SELECT Name FROM player WHERE Earnings = (SELECT max(Earnings) FROM player);"
    },
    {
        "question": "What are the distinct countries of players with earnings higher than 1200000?",
        "knowledge": {
            "player": {
                "columns": [
                    "Country"
                ],
                "conditions": {
                    "Earnings": {
                        "operator": ">",
                        "value": 1200000
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Filter the 'player' table to select only those players whose 'Earnings' are higher than 1200000.",
            "Retrieve the distinct 'Country' values of the selected players."
        ],
        "db_id": "soccer_3",
        "id": 12,
        "generated_sql": "SELECT DISTINCT Country FROM player WHERE Earnings > 1200000"
    },
    {
        "question": "From which countries are players who make more than 1200000 from?",
        "knowledge": {
            "player": {
                "columns": [
                    "Country"
                ],
                "conditions": {
                    "Earnings": {
                        "operator": ">",
                        "value": 1200000
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Filter the 'player' table to select only those players whose 'Earnings' are higher than 1200000.",
            "Retrieve the distinct 'Country' values of the selected players."
        ],
        "db_id": "soccer_3",
        "id": 13,
        "generated_sql": "SELECT DISTINCT T2.Country FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Earnings  >  1200000"
    },
    {
        "question": "What is the country of the player with the highest earnings among players that have more than 2 win counts?",
        "knowledge": {
            "player": {
                "columns": [
                    "Country",
                    "Earnings"
                ],
                "conditions": {
                    "Wins_count": {
                        "operator": ">",
                        "value": 2
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Filter the 'player' table to select only those players whose 'Wins_count' is greater than 2.",
            "Identify the player with the highest 'Earnings' among the selected players.",
            "Retrieve the 'Country' of the player identified in the previous step."
        ],
        "db_id": "soccer_3",
        "id": 14,
        "generated_sql": "SELECT T2.Country FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Wins_count > 2 ORDER BY T1.Earnings DESC LIMIT 1"
    },
    {
        "question": "Of players who have more than 2 wins, what is the country of the player who makes the most?",
        "knowledge": {
            "player": {
                "columns": [
                    "Country",
                    "Earnings"
                ],
                "conditions": {
                    "Wins_count": {
                        "operator": ">",
                        "value": 2
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Filter the 'player' table to select only those players whose 'Wins_count' is greater than 2.",
            "Identify the player with the highest 'Earnings' among the selected players.",
            "Retrieve the 'Country' of the player identified in the previous step."
        ],
        "db_id": "soccer_3",
        "id": 15,
        "generated_sql": "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "question": "Show names of players and names of clubs they are in.",
        "knowledge": {
            "player": {
                "columns": [
                    "Name",
                    "Club_ID"
                ]
            },
            "club": {
                "columns": [
                    "Name",
                    "Club_ID"
                ]
            }
        },
        "label": "nested",
        "steps": [
            "Retrieve the 'Name' and 'Club_ID' columns from the 'player' table.",
            "Retrieve the 'Name' column from the 'club' table.",
            "Join the 'player' and 'club' tables on the 'Club_ID' column.",
            "Display the 'Name' of players along with the corresponding 'Name' of clubs they are in."
        ],
        "db_id": "soccer_3",
        "id": 16,
        "generated_sql": "SELECT player.Name, club.Name FROM player INNER JOIN club ON player.Club_ID = club.Club_ID"
    },
    {
        "question": "What are the names of players and the corresponding clubs that they are in?",
        "knowledge": {
            "player": {
                "columns": [
                    "Name",
                    "Club_ID"
                ]
            },
            "club": {
                "columns": [
                    "Name",
                    "Club_ID"
                ]
            }
        },
        "label": "nested",
        "steps": [
            "Retrieve the 'Name' and 'Club_ID' columns from the 'player' table.",
            "Retrieve the 'Name' column from the 'club' table.",
            "Join the 'player' and 'club' tables on the 'Club_ID' column.",
            "Display the 'Name' of players along with the corresponding 'Name' of clubs they are in."
        ],
        "db_id": "soccer_3",
        "id": 17,
        "generated_sql": "SELECT T2.Name, T1.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID"
    },
    {
        "question": "Show names of clubs that have players with more than 2 win counts.",
        "knowledge": {
            "club": {
                "columns": [
                    "Name",
                    "Club_ID"
                ]
            },
            "player": {
                "columns": [
                    "Wins_count",
                    "Club_ID"
                ]
            }
        },
        "label": "nested",
        "steps": [
            "Retrieve the 'Name' and 'Club_ID' columns from the 'club' table.",
            "Retrieve the 'Wins_count' and 'Club_ID' columns from the 'player' table.",
            "Filter rows from the 'player' table where 'Wins_count' is greater than 2.",
            "Join the filtered 'player' table with the 'club' table on the 'Club_ID' column.",
            "Display the 'Name' of clubs that have players with more than 2 win counts."
        ],
        "db_id": "soccer_3",
        "id": 18,
        "generated_sql": "SELECT T3.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN club AS T3 ON T1.Club_ID  =  T3.Club_ID WHERE T1.Wins_count > 2"
    },
    {
        "question": "What are the names of clubs that have players who have won more than twice?",
        "knowledge": {
            "club": {
                "columns": [
                    "Name",
                    "Club_ID"
                ]
            },
            "player": {
                "columns": [
                    "Wins_count",
                    "Club_ID"
                ]
            }
        },
        "label": "nested",
        "steps": [
            "Retrieve the 'Name' and 'Club_ID' columns from the 'club' table.",
            "Retrieve the 'Wins_count' and 'Club_ID' columns from the 'player' table.",
            "Filter rows from the 'player' table where 'Wins_count' is greater than 2.",
            "Join the filtered 'player' table with the 'club' table on the 'Club_ID' column.",
            "Display the 'Name' of clubs that have players who have won more than twice."
        ],
        "db_id": "soccer_3",
        "id": 19,
        "generated_sql": "SELECT DISTINCT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2"
    },
    {
        "question": "Show names of players from the club with manager \"Sam Allardyce\".",
        "knowledge": {
            "club": {
                "Club_ID": "int",
                "Manager": "text"
            },
            "player": {
                "Name": "text",
                "Club_ID": "int"
            }
        },
        "label": "nested",
        "steps": [
            "Find the Club_ID of the club managed by 'Sam Allardyce'.",
            "Find the names of players who belong to that Club_ID."
        ],
        "db_id": "soccer_3",
        "id": 20,
        "generated_sql": "SELECT Name FROM player WHERE Club_ID = (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce')"
    },
    {
        "question": "What are the names of players from the club managed by Sam Allardyce?",
        "knowledge": {
            "club": {
                "Club_ID": "int",
                "Manager": "text"
            },
            "player": {
                "Name": "text",
                "Club_ID": "int"
            }
        },
        "label": "nested",
        "steps": [
            "Find the Club_ID of the club managed by 'Sam Allardyce'.",
            "Find the names of players who belong to that Club_ID."
        ],
        "db_id": "soccer_3",
        "id": 21,
        "generated_sql": "SELECT Name FROM player WHERE Club_ID = (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce')"
    },
    {
        "question": "Show names of clubs in descending order of average earnings of players belonging.",
        "knowledge": {
            "club": {
                "Club_ID": "int",
                "Name": "text"
            },
            "player": {
                "Earnings": "real",
                "Club_ID": "int"
            }
        },
        "label": "nested",
        "steps": [
            "Calculate the average earnings of players for each club.",
            "Sort the clubs by the calculated average earnings in descending order.",
            "Retrieve the names of the clubs based on the sorted order."
        ],
        "db_id": "soccer_3",
        "id": 22,
        "generated_sql": "SELECT T3.name  FROM player AS T1  INNER JOIN club AS T2  ON T1.club_id = T2.club_id  INNER JOIN club AS T3  ON T2.club_id = T3.club_id  GROUP BY T3.name  ORDER BY AVG(T1.earnings) DESC"
    },
    {
        "question": "What are the names of clubs, ordered descending by the average earnings of players within each?",
        "knowledge": {
            "club": {
                "Club_ID": "int",
                "Name": "text"
            },
            "player": {
                "Earnings": "real",
                "Club_ID": "int"
            }
        },
        "label": "nested",
        "steps": [
            "Calculate the average earnings of players for each club.",
            "Sort the clubs by the calculated average earnings in descending order.",
            "Retrieve the names of the clubs based on the sorted order."
        ],
        "db_id": "soccer_3",
        "id": 23,
        "generated_sql": "SELECT club.Name, AVG(player.Earnings) AS Average_Earnings FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Name ORDER BY Average_Earnings DESC;"
    },
    {
        "question": "Show different manufacturers and the number of clubs they are associated with.",
        "knowledge": {
            "club": {
                "Manufacturer": "text",
                "Club_ID": "int"
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of clubs associated with each manufacturer."
        ],
        "db_id": "soccer_3",
        "id": 24,
        "generated_sql": "SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer"
    },
    {
        "question": "How many clubs use each manufacturer?",
        "knowledge": {
            "club": {
                "Manufacturer": "text",
                "Club_ID": "int"
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of clubs associated with each manufacturer."
        ],
        "db_id": "soccer_3",
        "id": 25,
        "generated_sql": "SELECT COUNT(*), Manufacturer FROM club GROUP BY Manufacturer"
    },
    {
        "question": "Please show the most common manufacturer of clubs.",
        "knowledge": {
            "club": {
                "Manufacturer": "text",
                "Club_ID": "int"
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of clubs associated with each manufacturer.",
            "Identify the manufacturer with the highest count."
        ],
        "db_id": "soccer_3",
        "id": 26,
        "generated_sql": "SELECT Manufacturer, COUNT(*) AS Total FROM club GROUP BY Manufacturer ORDER BY Total DESC LIMIT 1"
    },
    {
        "question": "Which manufacturer is most common among clubs?",
        "knowledge": {
            "club": {
                "Manufacturer": "text",
                "Club_ID": "int"
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of clubs associated with each manufacturer.",
            "Identify the manufacturer with the highest count."
        ],
        "db_id": "soccer_3",
        "id": 27,
        "generated_sql": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "List the manufacturers that are associated with more than one club.",
        "knowledge": {
            "club": {
                "Manufacturer": "text",
                "Club_ID": "int"
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of clubs associated with each manufacturer.",
            "Filter out manufacturers associated with only one club."
        ],
        "db_id": "soccer_3",
        "id": 28,
        "generated_sql": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1"
    },
    {
        "question": "Which manufacturers work for more than 1 club?",
        "knowledge": {
            "club": {
                "Manufacturer": "text"
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of clubs associated with each manufacturer.",
            "Filter out manufacturers associated with more than one club."
        ],
        "db_id": "soccer_3",
        "id": 29,
        "generated_sql": "SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(club_id) > 1"
    },
    {
        "question": "List the country that have more than one player.",
        "knowledge": {
            "player": {
                "Country": "text"
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of players from each country.",
            "Filter out countries with more than one player."
        ],
        "db_id": "soccer_3",
        "id": 30,
        "generated_sql": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1"
    },
    {
        "question": "Which countries have produced more than one player?",
        "knowledge": {
            "player": {
                "Country": "text"
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of players from each country.",
            "Filter out countries with more than one player."
        ],
        "db_id": "soccer_3",
        "id": 31,
        "generated_sql": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1"
    },
    {
        "question": "List the name of clubs that do not have players.",
        "knowledge": {
            "club": {
                "Name": "text"
            },
            "player": {
                "Club_ID": "int"
            }
        },
        "label": "simple",
        "steps": [
            "Identify clubs with no players associated with them."
        ],
        "db_id": "soccer_3",
        "id": 32,
        "generated_sql": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
    },
    {
        "question": "What are the names of clubs that do not have any players?",
        "knowledge": {
            "club": {
                "Name": "text"
            },
            "player": {
                "Club_ID": "int"
            }
        },
        "label": "simple",
        "steps": [
            "Identify clubs with no players associated with them."
        ],
        "db_id": "soccer_3",
        "id": 33,
        "generated_sql": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
    },
    {
        "question": "Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.",
        "knowledge": {
            "player": {
                "Name": "text",
                "Country": "text",
                "Earnings": "real"
            }
        },
        "label": "simple",
        "steps": [
            "Filter players based on their earnings: one group with earnings more than 1400000 and another group with earnings less than 1100000.",
            "Retrieve the countries of players from each group."
        ],
        "db_id": "soccer_3",
        "id": 34,
        "generated_sql": "SELECT T1.Country FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Earnings  >  1400000 UNION SELECT T1.Country FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Earnings  <  1100000"
    },
    {
        "question": "Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?",
        "knowledge": {
            "player": {
                "Name": "text",
                "Country": "text",
                "Earnings": "real"
            }
        },
        "label": "simple",
        "steps": [
            "Identify players with earnings over 1400000 and players with earnings below 1100000.",
            "Determine the countries of these players.",
            "Find the intersection of the countries from both groups."
        ],
        "db_id": "soccer_3",
        "id": 35,
        "generated_sql": "SELECT T1.Country FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Earnings > 1400000 INTERSECT SELECT T1.Country FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Earnings < 1100000"
    },
    {
        "question": "What is the number of distinct countries of all players?",
        "knowledge": {
            "player": {
                "Country": "text"
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the distinct countries of all players.",
            "Count the number of distinct countries."
        ],
        "db_id": "soccer_3",
        "id": 36,
        "generated_sql": "SELECT COUNT(DISTINCT Country) FROM player"
    },
    {
        "question": "How many different countries are players from?",
        "knowledge": {
            "player": {
                "Country": "text"
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the distinct countries of all players.",
            "Count the number of distinct countries."
        ],
        "db_id": "soccer_3",
        "id": 37,
        "generated_sql": "SELECT count(DISTINCT Country) FROM player"
    },
    {
        "question": "Show the earnings of players from country \"Australia\" or \"Zimbabwe\".",
        "knowledge": {
            "player": {
                "Country": "text",
                "Earnings": "real"
            }
        },
        "label": "simple",
        "steps": [
            "Filter the players based on the countries 'Australia' or 'Zimbabwe'.",
            "Retrieve the earnings of the filtered players."
        ],
        "db_id": "soccer_3",
        "id": 38,
        "generated_sql": "SELECT T3.Earnings FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID JOIN player AS T3 ON T3.Country = 'Australia' OR T3.Country = 'Zimbabwe'"
    },
    {
        "question": "What are the earnings of players from either of the countries of Australia or Zimbabwe?",
        "knowledge": {
            "player": {
                "Country": "text",
                "Earnings": "real"
            }
        },
        "label": "simple",
        "steps": [
            "Filter the players based on the countries 'Australia' or 'Zimbabwe'.",
            "Retrieve the earnings of the filtered players."
        ],
        "db_id": "soccer_3",
        "id": 39,
        "generated_sql": "SELECT Name, Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe')"
    },
    {
        "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.",
        "knowledge": {
            "tables": [
                "Customers",
                "Orders",
                "Order_Items"
            ],
            "joins": {
                "simple": [
                    {
                        "table_1": "Customers",
                        "table_2": "Orders",
                        "condition": "Customers.customer_id = Orders.customer_id"
                    },
                    {
                        "table_1": "Orders",
                        "table_2": "Order_Items",
                        "condition": "Orders.order_id = Order_Items.order_id"
                    }
                ]
            },
            "filters": [
                "Count of distinct Orders.order_id > 2",
                "Count of distinct Order_Items.order_item_id >= 3"
            ]
        },
        "label": "nested",
        "steps": "1. Join Customers with Orders and Orders with Order_Items. 2. Filter customers who have placed more than 2 orders and have bought at least 3 items.",
        "db_id": "e_commerce",
        "id": 40,
        "generated_sql": "SELECT DISTINCT C.customer_id ,  C.customer_first_name ,  C.customer_last_name FROM Customers C INNER JOIN Orders O ON C.customer_id = O.customer_id INNER JOIN Order_Items OI ON O.order_id = OI.order_id WHERE ( SELECT COUNT(DISTINCT O2.order_id) FROM Orders O2 INNER JOIN Order_Items OI2 ON O2.order_id = OI2.order_id WHERE O2.customer_id = C.customer_id ) > 2 AND ( SELECT COUNT(DISTINCT OI3.order_item_id) FROM Order_Items OI3 WHERE OI3.order_id IN ( SELECT O3.order_id FROM Orders O3 WHERE O3.customer_id = C.customer_id ) ) >= 3"
    },
    {
        "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?",
        "knowledge": {
            "tables": [
                "Customers",
                "Orders",
                "Order_Items"
            ],
            "joins": {
                "simple": [
                    {
                        "table_1": "Customers",
                        "table_2": "Orders",
                        "condition": "Customers.customer_id = Orders.customer_id"
                    },
                    {
                        "table_1": "Orders",
                        "table_2": "Order_Items",
                        "condition": "Orders.order_id = Order_Items.order_id"
                    }
                ]
            },
            "filters": [
                "Count of distinct Orders.order_id > 2",
                "Count of distinct Order_Items.order_item_id >= 3"
            ]
        },
        "label": "nested",
        "steps": "1. Join Customers with Orders and Orders with Order_Items. 2. Filter customers who have ordered more than twice and have bought at least 3 items.",
        "db_id": "e_commerce",
        "id": 41,
        "generated_sql": "SELECT DISTINCT Customers.customer_id ,  Customers.customer_first_name ,  Customers.customer_last_name FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name HAVING COUNT(DISTINCT Orders.order_id) > 2 AND COUNT(DISTINCT Order_Items.order_item_id) >= 3"
    },
    {
        "question": "For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.",
        "knowledge": {
            "tables": [
                "Orders",
                "Order_Items"
            ],
            "joins": {
                "simple": [
                    {
                        "table_1": "Orders",
                        "table_2": "Order_Items",
                        "condition": "Orders.order_id = Order_Items.order_id"
                    }
                ]
            },
            "aggregation": {
                "group_by": [
                    "Orders.order_id",
                    "Orders.order_status_code"
                ],
                "functions": [
                    "Count(Order_Items.product_id) AS num_products"
                ]
            }
        },
        "label": "nested",
        "steps": "1. Join Orders with Order_Items. 2. Group by order id and status. 3. Count the number of products for each order.",
        "db_id": "e_commerce",
        "id": 42,
        "generated_sql": "SELECT Orders.order_id, Orders.order_status_code, COUNT(Order_Items.product_id) AS num_products FROM Orders LEFT JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.order_status_code"
    },
    {
        "question": "For every order, how many products does it contain, and what are the orders' statuses and ids?",
        "knowledge": {
            "tables": [
                "Orders",
                "Order_Items"
            ],
            "joins": {
                "simple": [
                    {
                        "table_1": "Orders",
                        "table_2": "Order_Items",
                        "condition": "Orders.order_id = Order_Items.order_id"
                    }
                ]
            },
            "aggregation": {
                "group_by": [
                    "Orders.order_id",
                    "Orders.order_status_code"
                ],
                "functions": [
                    "Count(Order_Items.product_id) AS num_products"
                ]
            }
        },
        "label": "nested",
        "steps": "1. Join Orders with Order_Items. 2. Group by order id and status. 3. Count the number of products for each order.",
        "db_id": "e_commerce",
        "id": 43,
        "generated_sql": "SELECT T2.order_status_code, T2.order_id, COUNT(T1.product_id) AS num_products FROM Order_Items AS T1 INNER JOIN Orders AS T2 ON T2.order_id = T1.order_id GROUP BY T2.order_id, T2.order_status_code"
    },
    {
        "question": "List the dates of the orders which were placed at the earliest time or have more than 1 items.",
        "knowledge": {
            "tables": [
                "Orders",
                "Order_Items"
            ],
            "joins": {
                "simple": [
                    {
                        "table_1": "Orders",
                        "table_2": "Order_Items",
                        "condition": "Orders.order_id = Order_Items.order_id"
                    }
                ]
            },
            "filtering": {
                "conditions": [
                    "Orders.date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)",
                    "COUNT(Order_Items.order_item_id) > 1"
                ],
                "logical_operator": "OR"
            }
        },
        "label": "nested",
        "steps": "1. Join Orders with Order_Items. 2. Filter orders by the earliest order placement time or orders with more than 1 item.",
        "db_id": "e_commerce",
        "id": 44,
        "generated_sql": "SELECT date_order_placed FROM Orders WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM Orders) OR COUNT(order_item_id) > 1"
    },
    {
        "question": "What are the dates of the earliest order and the dates of all orders with more than 1 item?",
        "knowledge": {
            "tables": [
                "Orders",
                "Order_Items"
            ],
            "joins": {
                "simple": [
                    {
                        "table_1": "Orders",
                        "table_2": "Order_Items",
                        "condition": "Orders.order_id = Order_Items.order_id"
                    }
                ]
            },
            "filtering": {
                "conditions": [
                    "Orders.date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)",
                    "COUNT(Order_Items.order_item_id) > 1"
                ],
                "logical_operator": "OR"
            }
        },
        "label": "nested",
        "steps": "1. Join Orders with Order_Items. 2. Filter orders by the earliest order placement date or orders with more than 1 item.",
        "db_id": "e_commerce",
        "id": 45,
        "generated_sql": "SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed = ( SELECT MIN(date_order_placed) FROM Orders ) OR COUNT(T2.order_item_id) > 1 GROUP BY T1.order_id"
    },
    {
        "question": "Which customers did not make any orders? List the first name, middle initial and last name.",
        "knowledge": {
            "tables": [
                "Customers"
            ],
            "joins": {
                "simple": []
            },
            "filtering": {
                "condition": "Customers.customer_id NOT IN (SELECT customer_id FROM Orders)"
            }
        },
        "label": "simple",
        "steps": "Filter customers by those whose customer_id is not present in the Orders table.",
        "db_id": "e_commerce",
        "id": 46,
        "generated_sql": "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)"
    },
    {
        "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?",
        "knowledge": {
            "tables": [
                "Customers",
                "Orders"
            ],
            "joins": {
                "simple": []
            },
            "filtering": {
                "condition": "Customers.customer_id NOT IN (SELECT customer_id FROM Orders)"
            }
        },
        "label": "simple",
        "steps": "Filter customers by those whose customer_id is not present in the Orders table.",
        "db_id": "e_commerce",
        "id": 47,
        "generated_sql": "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)"
    },
    {
        "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?",
        "knowledge": {
            "tables": [
                "Products",
                "Orders",
                "Order_Items"
            ],
            "joins": {
                "simple": [
                    {
                        "table1": "Products",
                        "table2": "Order_Items",
                        "condition": "Products.product_id = Order_Items.product_id"
                    },
                    {
                        "table1": "Orders",
                        "table2": "Order_Items",
                        "condition": "Orders.order_id = Order_Items.order_id"
                    }
                ]
            },
            "filtering": {
                "condition": "Products.product_id NOT IN (SELECT product_id FROM (SELECT product_id, COUNT(*) AS order_count FROM Order_Items GROUP BY product_id HAVING order_count >= 2))"
            }
        },
        "label": "nested",
        "steps": [
            "Join the Products table with the Order_Items table on product_id.",
            "Join the Orders table with the Order_Items table on order_id.",
            "Filter the products by those whose product_id is not present in the subquery result of products ordered at least twice."
        ],
        "db_id": "e_commerce",
        "id": 48,
        "generated_sql": "SELECT Products.product_id, Products.product_name, Products.product_price, Products.product_color FROM Products LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Order_Items.product_id IS NULL"
    },
    {
        "question": "What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?",
        "knowledge": {
            "tables": [
                "Products",
                "Order_Items"
            ],
            "joins": {
                "simple": [
                    {
                        "table1": "Products",
                        "table2": "Order_Items",
                        "condition": "Products.product_id = Order_Items.product_id"
                    }
                ]
            },
            "group_by": "Products.product_id",
            "having": "COUNT(Order_Items.order_id) < 2"
        },
        "label": "simple",
        "steps": [
            "Join the Products table with the Order_Items table on product_id.",
            "Group the result by product_id.",
            "Filter the products by those having less than two orders."
        ],
        "db_id": "e_commerce",
        "id": 49,
        "generated_sql": "SELECT Products.product_id, Products.product_name, Products.product_price, Products.product_color FROM Products LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id HAVING COUNT(Order_Items.order_id) < 2"
    },
    {
        "question": "Which orders have at least 2 products on it? List the order id and date.",
        "knowledge": {
            "tables": [
                "Orders",
                "Order_Items"
            ],
            "joins": {
                "simple": [
                    {
                        "table1": "Orders",
                        "table2": "Order_Items",
                        "condition": "Orders.order_id = Order_Items.order_id"
                    }
                ]
            },
            "group_by": "Orders.order_id, Orders.date_order_placed",
            "having": "COUNT(Order_Items.product_id) >= 2"
        },
        "label": "simple",
        "steps": [
            "Join the Orders table with the Order_Items table on order_id.",
            "Group the result by order_id and date_order_placed.",
            "Filter the orders by those having at least 2 products."
        ],
        "db_id": "e_commerce",
        "id": 50,
        "generated_sql": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ,  T1.date_order_placed HAVING COUNT(T2.product_id) >= 2"
    },
    {
        "question": "What are the ids and dates of the orders with at least two products?",
        "knowledge": {
            "tables": [
                "Orders",
                "Order_Items"
            ],
            "joins": {
                "simple": [
                    {
                        "table1": "Orders",
                        "table2": "Order_Items",
                        "condition": "Orders.order_id = Order_Items.order_id"
                    }
                ]
            },
            "group_by": "Orders.order_id, Orders.date_order_placed",
            "having": "COUNT(Order_Items.product_id) >= 2"
        },
        "label": "simple",
        "steps": [
            "Join the Orders table with the Order_Items table on order_id.",
            "Group the result by order_id and date_order_placed.",
            "Filter the orders by those having at least two products."
        ],
        "db_id": "e_commerce",
        "id": 51,
        "generated_sql": "SELECT Orders.order_id, Orders.date_order_placed FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.date_order_placed HAVING COUNT(Order_Items.product_id) >= 2"
    },
    {
        "question": "Which product are listed in orders most frequently? List the id, product name and price.",
        "knowledge": {
            "tables": [
                "Products",
                "Order_Items"
            ],
            "joins": {
                "simple": [
                    {
                        "table1": "Products",
                        "table2": "Order_Items",
                        "condition": "Products.product_id = Order_Items.product_id"
                    }
                ]
            },
            "group_by": "Products.product_id, Products.product_name, Products.product_price",
            "order_by": "COUNT(*) DESC",
            "limit": 1
        },
        "label": "simple",
        "steps": [
            "Join the Products table with the Order_Items table on product_id.",
            "Group the result by product_id, product_name, and product_price.",
            "Order the result by the count of occurrences of each product in descending order.",
            "Limit the result to show only the product that is listed most frequently."
        ],
        "db_id": "e_commerce",
        "id": 52,
        "generated_sql": "SELECT Products.product_id, Products.product_name, Products.product_price FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id, Products.product_name, Products.product_price ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What are the ids, names, and prices of all products that are ordered most frequently?",
        "knowledge": {
            "tables": [
                "Products",
                "Order_Items"
            ],
            "joins": {
                "simple": [
                    {
                        "table1": "Products",
                        "table2": "Order_Items",
                        "condition": "Products.product_id = Order_Items.product_id"
                    }
                ]
            },
            "group_by": "Products.product_id, Products.product_name, Products.product_price",
            "order_by": "COUNT(*) DESC"
        },
        "label": "simple",
        "steps": [
            "Join the Products table with the Order_Items table on product_id.",
            "Group the result by product_id, product_name, and product_price.",
            "Order the result by the count of occurrences of each product in descending order."
        ],
        "db_id": "e_commerce",
        "id": 53,
        "generated_sql": "SELECT Products.product_id ,  Products.product_name ,  Products.product_price FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id, Products.product_name, Products.product_price ORDER BY COUNT(*) DESC"
    },
    {
        "question": "Which order have the least sum of the product prices. List the order id and sum.",
        "knowledge": {
            "tables": [
                "Orders",
                "Order_Items",
                "Products"
            ],
            "joins": {
                "nested": [
                    {
                        "table1": "Orders",
                        "table2": "Order_Items",
                        "condition": "Orders.order_id = Order_Items.order_id"
                    },
                    {
                        "table1": "Order_Items",
                        "table2": "Products",
                        "condition": "Order_Items.product_id = Products.product_id"
                    }
                ]
            },
            "group_by": "Orders.order_id",
            "select": "Orders.order_id, SUM(Products.product_price) AS total_price",
            "order_by": "total_price ASC",
            "limit": 1
        },
        "label": "nested",
        "steps": [
            "Join the Orders table with the Order_Items table on order_id.",
            "Join the resulting table with the Products table on product_id.",
            "Group the result by order_id and calculate the sum of product prices for each order.",
            "Order the result by the total sum of product prices in ascending order.",
            "Limit the result to the first row to get the order with the least sum of product prices."
        ],
        "db_id": "e_commerce",
        "id": 54,
        "generated_sql": "SELECT Orders.order_id, SUM(Products.product_price) AS total_price FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id ORDER BY total_price ASC LIMIT 1"
    },
    {
        "question": "What is the order that total cost the least , and how much is the total cost ?",
        "knowledge": {
            "tables": [
                "Orders",
                "Order_Items",
                "Products"
            ],
            "joins": {
                "nested": [
                    {
                        "table1": "Orders",
                        "table2": "Order_Items",
                        "condition": "Orders.order_id = Order_Items.order_id"
                    },
                    {
                        "table1": "Order_Items",
                        "table2": "Products",
                        "condition": "Order_Items.product_id = Products.product_id"
                    }
                ]
            },
            "group_by": "Orders.order_id",
            "select": "Orders.order_id, SUM(Products.product_price) AS total_cost",
            "order_by": "total_cost ASC",
            "limit": 1
        },
        "label": "nested",
        "steps": [
            "Join the Orders table with the Order_Items table on order_id.",
            "Join the resulting table with the Products table on product_id.",
            "Group the result by order_id and calculate the sum of product prices for each order.",
            "Order the result by the total sum of product prices in ascending order.",
            "Limit the result to the first row to get the order with the least total cost."
        ],
        "db_id": "e_commerce",
        "id": 55,
        "generated_sql": "SELECT Orders.order_id, SUM(Products.product_price) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id ORDER BY total_cost ASC LIMIT 1"
    },
    {
        "question": "What is the most popular payment method?",
        "knowledge": {
            "tables": [
                "Customer_Payment_Methods"
            ],
            "select": "payment_method_code",
            "group_by": "payment_method_code",
            "order_by": "COUNT(*) DESC",
            "limit": 1
        },
        "label": "simple",
        "steps": [
            "Group the payment methods by their codes.",
            "Count the occurrences of each payment method.",
            "Order the result by the count of occurrences in descending order.",
            "Limit the result to the first row to find the most popular payment method."
        ],
        "db_id": "e_commerce",
        "id": 56,
        "generated_sql": "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What is the payment method that most customers use?",
        "knowledge": {
            "tables": [
                "Customer_Payment_Methods"
            ],
            "select": "payment_method_code",
            "group_by": "payment_method_code",
            "order_by": "COUNT(DISTINCT customer_id) DESC",
            "limit": 1
        },
        "label": "simple",
        "steps": [
            "Group the payment methods by their codes.",
            "Count the number of unique customers for each payment method.",
            "Order the result by the count of unique customers in descending order.",
            "Limit the result to the first row to find the payment method that most customers use."
        ],
        "db_id": "e_commerce",
        "id": 57,
        "generated_sql": "SELECT payment_method_code  FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(DISTINCT customer_id) DESC LIMIT 1;"
    },
    {
        "question": "How many number of products does each gender of customers buy? List the gender and the number",
        "knowledge": {
            "tables": [
                "Customers",
                "Order_Items"
            ],
            "join": {
                "type": "inner",
                "conditions": [
                    "Customers.customer_id = Orders.customer_id",
                    "Orders.order_id = Order_Items.order_id"
                ]
            },
            "select": "Customers.gender_code, COUNT(DISTINCT Order_Items.product_id) AS product_count",
            "group_by": "Customers.gender_code"
        },
        "label": "nested",
        "steps": [
            "Join the Customers table with the Order_Items table using the common customer_id and order_id columns.",
            "Group the result by the gender of the customers.",
            "Count the number of distinct products bought by each gender.",
            "Select the gender code and the count of products for each gender."
        ],
        "db_id": "e_commerce",
        "id": 58,
        "generated_sql": "SELECT Customers.gender_code, COUNT(DISTINCT Order_Items.product_id) AS product_count FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Customers.gender_code"
    },
    {
        "question": "How many products does each gender buy?",
        "knowledge": {
            "tables": [
                "Customers",
                "Orders",
                "Order_Items"
            ],
            "join": {
                "type": "inner",
                "conditions": [
                    "Customers.customer_id = Orders.customer_id",
                    "Orders.order_id = Order_Items.order_id"
                ]
            },
            "select": "Customers.gender_code, COUNT(Order_Items.order_item_id) AS product_count",
            "group_by": "Customers.gender_code"
        },
        "label": "nested",
        "steps": [
            "Join the Customers table with the Orders table using the common customer_id column.",
            "Join the resulting table with the Order_Items table using the common order_id column.",
            "Group the result by the gender of the customers.",
            "Count the number of products bought by each gender.",
            "Select the gender code and the count of products for each gender."
        ],
        "db_id": "e_commerce",
        "id": 59,
        "generated_sql": "SELECT T1.gender_code ,  COUNT(T3.order_item_id) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Order_Items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.gender_code"
    },
    {
        "question": "How many orders has each gender of customers placed?",
        "knowledge": {
            "Tables": [
                "Customers",
                "Orders"
            ],
            "Joins": {
                "type": "simple",
                "description": "Join Customers table with Orders table using customer_id as the common attribute."
            },
            "Derivation": "Count the number of orders for each gender of customers."
        },
        "label": "simple",
        "steps": [
            "Join Customers table with Orders table using customer_id as the common attribute.",
            "Count the number of orders for each gender of customers."
        ],
        "db_id": "e_commerce",
        "id": 60,
        "generated_sql": "SELECT customer_id ,  gender_code ,  COUNT(*) FROM Customers AS t1 JOIN Orders AS t2 ON t1.customer_id = t2.customer_id GROUP BY gender_code"
    },
    {
        "question": "How many orders has each gender placed?",
        "knowledge": {
            "Tables": [
                "Customers",
                "Orders"
            ],
            "Joins": {
                "type": "simple",
                "description": "Join Customers table with Orders table using customer_id as the common attribute."
            },
            "Derivation": "Count the number of orders for each gender of customers."
        },
        "label": "simple",
        "steps": [
            "Join Customers table with Orders table using customer_id as the common attribute.",
            "Count the number of orders for each gender of customers."
        ],
        "db_id": "e_commerce",
        "id": 61,
        "generated_sql": "SELECT T1.gender_code, count(T2.order_id) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code"
    },
    {
        "question": "List the customers' first name, middle initial, last name and payment methods.",
        "knowledge": {
            "Tables": [
                "Customers",
                "Customer_Payment_Methods"
            ],
            "Joins": {
                "type": "simple",
                "description": "Join Customers table with Customer_Payment_Methods table using customer_id as the common attribute."
            }
        },
        "label": "simple",
        "steps": [
            "Join Customers table with Customer_Payment_Methods table using customer_id as the common attribute."
        ],
        "db_id": "e_commerce",
        "id": 62,
        "generated_sql": "SELECT T1.customer_first_name, T1.customer_middle_initial, T1.customer_last_name, T2.payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id"
    },
    {
        "question": "What are the first names, middle initials, last names, and payment methods of all customers?",
        "knowledge": {
            "Tables": [
                "Customers",
                "Customer_Payment_Methods"
            ],
            "Joins": {
                "type": "simple",
                "description": "Join Customers table with Customer_Payment_Methods table using customer_id as the common attribute."
            }
        },
        "label": "simple",
        "steps": [
            "Join Customers table with Customer_Payment_Methods table using customer_id as the common attribute."
        ],
        "db_id": "e_commerce",
        "id": 63,
        "generated_sql": "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, cp.payment_method_code FROM Customers AS c JOIN Customer_Payment_Methods AS cp ON c.customer_id = cp.customer_id"
    },
    {
        "question": "List the invoices' status, date and the date of shipment.",
        "knowledge": {
            "Tables": [
                "Invoices",
                "Shipments"
            ],
            "Joins": {
                "type": "simple",
                "description": "Join Invoices table with Shipments table using invoice_number as the common attribute."
            }
        },
        "label": "simple",
        "steps": [
            "Join Invoices table with Shipments table using invoice_number as the common attribute."
        ],
        "db_id": "e_commerce",
        "id": 64,
        "generated_sql": "SELECT T1.invoice_status_code, T1.invoice_date, T2.shipment_date FROM INvoices AS T1 INNER JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number"
    },
    {
        "question": "What are the statuses, dates, and shipment dates for all invoices?",
        "knowledge": {
            "Tables": [
                "Invoices",
                "Shipments"
            ],
            "Joins": {
                "type": "simple",
                "description": "Join Invoices table with Shipments table using invoice_number as the common attribute."
            }
        },
        "label": "simple",
        "steps": [
            "Join Invoices table with Shipments table using invoice_number as the common attribute."
        ],
        "db_id": "e_commerce",
        "id": 65,
        "generated_sql": "SELECT T1.invoice_status_code, T1.invoice_date, T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number"
    },
    {
        "question": "List the names of the products being shipped and the corresponding shipment date.",
        "knowledge": {
            "Tables": [
                "Products",
                "Shipments"
            ],
            "Joins": {
                "type": "simple",
                "description": "Join Products table with Shipments table using product_id as the common attribute."
            }
        },
        "label": "simple",
        "steps": [
            "Join Products table with Shipments table using product_id as the common attribute."
        ],
        "db_id": "e_commerce",
        "id": 66,
        "generated_sql": "SELECT p.product_name, s.shipment_date FROM Products p JOIN Shipments s ON p.product_id = s.order_item_id"
    },
    {
        "question": "What are the names of the products tht have been shipped, and on what days were they shipped?",
        "knowledge": {
            "Tables": [
                "Products",
                "Shipments"
            ],
            "Joins": {
                "type": "simple",
                "description": "Join Products table with Shipments table using product_id as the common attribute."
            }
        },
        "label": "simple",
        "steps": [
            "Join Products table with Shipments table using product_id as the common attribute."
        ],
        "db_id": "e_commerce",
        "id": 67,
        "generated_sql": "SELECT p.product_name, s.shipment_date FROM Products p JOIN Shipments s ON p.product_id = s.product_id"
    },
    {
        "question": "What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?",
        "knowledge": {
            "Tables": [
                "Orders",
                "Order_Items",
                "Shipments",
                "Shipment_Items"
            ],
            "Joins": {
                "type": "nested",
                "description": [
                    "Join Orders table with Order_Items table using order_id as the common attribute.",
                    "Join Order_Items table with Shipment_Items table using order_item_id as the common attribute.",
                    "Join Shipment_Items table with Shipments table using shipment_id as the common attribute."
                ]
            }
        },
        "label": "nested",
        "steps": [
            "Join Orders table with Order_Items table using order_id as the common attribute.",
            "Join Order_Items table with Shipment_Items table using order_item_id as the common attribute.",
            "Join Shipment_Items table with Shipments table using shipment_id as the common attribute."
        ],
        "db_id": "e_commerce",
        "id": 68,
        "generated_sql": "SELECT T1.order_item_status_code, T3.shipment_tracking_number FROM Order_Items AS T1 INNER JOIN Orders AS T2 ON T1.order_id = T2.order_id INNER JOIN Shipment_Items AS T4 ON T1.order_item_id = T4.order_item_id INNER JOIN Shipments AS T3 ON T4.shipment_id = T3.shipment_id"
    },
    {
        "question": "What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?",
        "knowledge": {
            "Tables": [
                "Orders",
                "Order_Items",
                "Shipments",
                "Shipment_Items"
            ],
            "Joins": {
                "type": "nested",
                "description": [
                    "Join Orders table with Order_Items table using order_id as the common attribute.",
                    "Join Order_Items table with Shipment_Items table using order_item_id as the common attribute.",
                    "Join Shipment_Items table with Shipments table using shipment_id as the common attribute."
                ]
            }
        },
        "label": "nested",
        "steps": [
            "Join Orders table with Order_Items table using order_id as the common attribute.",
            "Join Order_Items table with Shipment_Items table using order_item_id as the common attribute.",
            "Join Shipment_Items table with Shipments table using shipment_id as the common attribute."
        ],
        "db_id": "e_commerce",
        "id": 69,
        "generated_sql": "SELECT T1.order_status_code, T2.order_item_status_code, T3.shipment_tracking_number FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id INNER JOIN Shipment_Items AS T4 ON T2.order_item_id = T4.order_item_id INNER JOIN Shipments AS T3 ON T4.shipment_id = T3.shipment_id"
    },
    {
        "question": "What is the product name and the color of the ordered items which have been shipped?",
        "knowledge": {
            "Tables": [
                "Products",
                "Orders",
                "Order_Items",
                "Shipments",
                "Shipment_Items"
            ],
            "Joins": {
                "type": "nested",
                "description": [
                    "Join Orders table with Order_Items table using order_id as the common attribute.",
                    "Join Order_Items table with Shipment_Items table using order_item_id as the common attribute.",
                    "Join Shipment_Items table with Shipments table using shipment_id as the common attribute.",
                    "Join Order_Items table with Products table using product_id as the common attribute."
                ]
            }
        },
        "label": "nested",
        "steps": [
            "Join Orders table with Order_Items table using order_id as the common attribute.",
            "Join Order_Items table with Shipment_Items table using order_item_id as the common attribute.",
            "Join Shipment_Items table with Shipments table using shipment_id as the common attribute.",
            "Join Order_Items table with Products table using product_id as the common attribute."
        ],
        "db_id": "e_commerce",
        "id": 70,
        "generated_sql": "SELECT T1.product_name, T1.product_color FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id JOIN Shipments AS T3 ON T2.order_id = T3.order_id"
    },
    {
        "question": "What are the names and colors of all products that have been shipped?",
        "knowledge": {
            "Tables": [
                "Products",
                "Shipments",
                "Shipment_Items",
                "Order_Items"
            ],
            "Joins": {
                "type": "nested",
                "description": [
                    "Join Shipments table with Shipment_Items table using shipment_id as the common attribute.",
                    "Join Shipment_Items table with Order_Items table using order_item_id as the common attribute.",
                    "Join Order_Items table with Products table using product_id as the common attribute."
                ]
            }
        },
        "label": "nested",
        "steps": [
            "Join Shipments table with Shipment_Items table using shipment_id as the common attribute.",
            "Join Shipment_Items table with Order_Items table using order_item_id as the common attribute.",
            "Join Order_Items table with Products table using product_id as the common attribute."
        ],
        "db_id": "e_commerce",
        "id": 71,
        "generated_sql": "SELECT T3.product_name, T3.product_color FROM Shipments AS T1 JOIN Shipment_Items AS T2 ON T1.shipment_id = T2.shipment_id JOIN Order_Items AS T3 ON T2.order_item_id = T3.order_item_id"
    },
    {
        "question": "List all the distinct product names, price and descriptions which are bought by female customers.",
        "knowledge": {
            "Tables": [
                "Products",
                "Customers",
                "Orders",
                "Order_Items"
            ],
            "Joins": {
                "type": "nested",
                "description": [
                    "Join Customers table with Orders table using customer_id as the common attribute.",
                    "Join Orders table with Order_Items table using order_id as the common attribute.",
                    "Join Order_Items table with Products table using product_id as the common attribute."
                ]
            },
            "Condition": "gender_code = 'Female'"
        },
        "label": "nested",
        "steps": [
            "Join Customers table with Orders table using customer_id as the common attribute.",
            "Join Orders table with Order_Items table using order_id as the common attribute.",
            "Join Order_Items table with Products table using product_id as the common attribute."
        ],
        "db_id": "e_commerce",
        "id": 72,
        "generated_sql": "SELECT DISTINCT T1.product_name, T1.product_price, T1.product_description FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T2.order_id JOIN Customers AS T4 ON T4.customer_id  =  T3.customer_id WHERE T4.gender_code  =  'Female'"
    },
    {
        "question": "What are the different names, prices, and descriptions for all products bought by female customers?",
        "knowledge": {
            "Tables": [
                "Products",
                "Customers",
                "Orders",
                "Order_Items"
            ],
            "Joins": {
                "type": "nested",
                "description": [
                    "Join Customers table with Orders table using customer_id as the common attribute.",
                    "Join Orders table with Order_Items table using order_id as the common attribute.",
                    "Join Order_Items table with Products table using product_id as the common attribute."
                ]
            },
            "Condition": "gender_code = 'Female'"
        },
        "label": "nested",
        "steps": [
            "Join Customers table with Orders table using customer_id as the common attribute.",
            "Join Orders table with Order_Items table using order_id as the common attribute.",
            "Join Order_Items table with Products table using product_id as the common attribute."
        ],
        "db_id": "e_commerce",
        "id": 73,
        "generated_sql": "SELECT P.product_name, P.product_price, P.product_description FROM Products AS P JOIN Orders AS O ON P.product_id = O.order_id JOIN Customers AS C ON O.customer_id = C.customer_id WHERE C.gender_code = 'Female'"
    },
    {
        "question": "What are invoices status of all the orders which have not been shipped?",
        "knowledge": {
            "Tables": [
                "Invoices",
                "Orders",
                "Shipments"
            ],
            "Joins": {
                "type": "simple",
                "description": "Join Orders table with Invoices table using order_id as the common attribute."
            },
            "Condition": "There are no direct joins with Shipments table since it's not needed to determine the orders that have not been shipped."
        },
        "label": "simple",
        "steps": "Join Orders table with Invoices table using order_id as the common attribute.",
        "db_id": "e_commerce",
        "id": 74,
        "generated_sql": "SELECT `invoice_status_code` FROM `invoices` WHERE `invoice_number` NOT IN (SELECT `invoice_number` FROM `shipments`)"
    },
    {
        "question": "What are the invoice statuses for all orderes that have not been shipped out yet?",
        "knowledge": {
            "Tables": [
                "Invoices",
                "Orders",
                "Shipments"
            ],
            "Joins": {
                "type": "simple",
                "description": "Join Orders table with Invoices table using order_id as the common attribute."
            },
            "Condition": "Exclude orders that have been shipped out by not joining with the Shipments table, as it is not needed to determine the orders that have not been shipped."
        },
        "label": "simple",
        "steps": "Join Orders table with Invoices table using order_id as the common attribute.",
        "db_id": "e_commerce",
        "id": 75,
        "generated_sql": "SELECT T1.invoice_status_code FROM Invoices AS T1 INNER JOIN Orders AS T2 ON T1.invoice_number  =  T2.invoice_number WHERE T2.order_id NOT IN (SELECT T2.order_id FROM Shipments AS T2 INNER JOIN Order_Items AS T3 ON T2.order_item_id  =  T3.order_item_id)"
    },
    {
        "question": "What are the total cost of all the orders ? List the order id , date , and total cost .",
        "knowledge": {
            "Tables": [
                "Orders",
                "Order_Items",
                "Products"
            ],
            "Joins": {
                "type": "nested",
                "description": "Join Orders table with Order_Items table using order_id as the common attribute, then join with Products table using product_id as the common attribute."
            },
            "Aggregation": {
                "attribute": "product_price",
                "function": "SUM",
                "alias": "total_cost",
                "description": "Calculate the total cost of each order by summing up the prices of all products in the order."
            }
        },
        "label": "nested",
        "steps": [
            "Join Orders table with Order_Items table using order_id as the common attribute.",
            "Join the result with Products table using product_id as the common attribute.",
            "Calculate the total cost of each order by summing up the prices of all products in the order."
        ],
        "db_id": "e_commerce",
        "id": 76,
        "generated_sql": "SELECT Orders.order_id, Orders.date_order_placed, SUM(Products.product_price) AS total_cost FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id, Orders.date_order_placed"
    },
    {
        "question": "For each order, what is its id, date, and total amount paid?",
        "knowledge": {
            "Tables": [
                "Orders",
                "Invoices",
                "Order_Items"
            ],
            "Joins": {
                "type": "nested",
                "description": "Join Orders table with Invoices table using order_id as the common attribute, then join with Order_Items table using order_id as the common attribute."
            },
            "Aggregation": {
                "attribute": "product_price",
                "function": "SUM",
                "alias": "total_amount_paid",
                "description": "Calculate the total amount paid for each order by summing up the prices of all products in the order."
            }
        },
        "label": "nested",
        "steps": [
            "Join Orders table with Invoices table using order_id as the common attribute.",
            "Join the result with Order_Items table using order_id as the common attribute.",
            "Calculate the total amount paid for each order by summing up the prices of all products in the order."
        ],
        "db_id": "e_commerce",
        "id": 77,
        "generated_sql": "SELECT Orders.order_id, Orders.date_order_placed, SUM(Products.product_price) as total_amount_paid FROM Orders JOIN Invoices ON Orders.order_id = Invoices.invoice_number JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id"
    },
    {
        "question": "How many customers have placed any order?",
        "knowledge": {
            "Tables": [
                "Customers",
                "Orders"
            ],
            "Joins": {
                "type": "simple",
                "description": "Join Customers table with Orders table using customer_id as the common attribute."
            },
            "Aggregation": {
                "function": "COUNT",
                "attribute": "customer_id",
                "description": "Count the number of distinct customer_ids to determine how many customers have placed any order."
            }
        },
        "label": "simple",
        "steps": [
            "Join Customers table with Orders table using customer_id as the common attribute.",
            "Count the number of distinct customer_ids to determine how many customers have placed any order."
        ],
        "db_id": "e_commerce",
        "id": 78,
        "generated_sql": "SELECT COUNT(DISTINCT `customer_id`) FROM `Orders`"
    },
    {
        "question": "How many different customers have ordered things?",
        "knowledge": {
            "Tables": [
                "Customers",
                "Orders"
            ],
            "Joins": {
                "type": "simple",
                "description": "Join Customers table with Orders table using customer_id as the common attribute."
            },
            "Aggregation": {
                "function": "COUNT",
                "attribute": "DISTINCT customer_id",
                "description": "Count the number of distinct customer_ids to determine how many different customers have ordered things."
            }
        },
        "label": "simple",
        "steps": [
            "Join Customers table with Orders table using customer_id as the common attribute.",
            "Count the number of distinct customer_ids to determine how many different customers have ordered things."
        ],
        "db_id": "e_commerce",
        "id": 79,
        "generated_sql": "SELECT COUNT(DISTINCT customer_id) FROM Orders"
    },
    {
        "question": "How many item states are there in the orders?",
        "knowledge": {
            "Tables": [
                "Orders",
                "Order_Items"
            ],
            "Joins": {
                "type": "simple",
                "description": "Join Orders table with Order_Items table using order_id as the common attribute."
            },
            "Distinct Count": {
                "attribute": "order_item_status_code",
                "description": "Count the distinct values of order_item_status_code to determine how many item states are there in the orders."
            }
        },
        "label": "simple",
        "steps": [
            "Join Orders table with Order_Items table using order_id as the common attribute.",
            "Count the distinct values of order_item_status_code to determine how many item states are there in the orders."
        ],
        "db_id": "e_commerce",
        "id": 80,
        "generated_sql": "SELECT COUNT(DISTINCT order_item_status_code) FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id"
    },
    {
        "question": "How many different item status codes are there listed in ordered items?",
        "knowledge": {
            "Tables": [
                "Order_Items"
            ],
            "Distinct Count": {
                "attribute": "order_item_status_code",
                "description": "Count the distinct values of order_item_status_code to determine how many different item status codes are there listed in ordered items."
            }
        },
        "label": "simple",
        "steps": [
            "Count the distinct values of order_item_status_code to determine how many different item status codes are there listed in ordered items."
        ],
        "db_id": "e_commerce",
        "id": 81,
        "generated_sql": "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items"
    },
    {
        "question": "How many different payment methods are there?",
        "knowledge": {
            "Tables": [
                "Customer_Payment_Methods"
            ],
            "Distinct Count": {
                "attribute": "payment_method_code",
                "description": "Count the distinct values of payment_method_code to determine how many different payment methods are there."
            }
        },
        "label": "simple",
        "steps": [
            "Count the distinct values of payment_method_code to determine how many different payment methods are there."
        ],
        "db_id": "e_commerce",
        "id": 82,
        "generated_sql": "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods"
    },
    {
        "question": "How many different payment methods can customers choose from?",
        "knowledge": {
            "Tables": [
                "Customer_Payment_Methods"
            ],
            "Distinct Count": {
                "attribute": "payment_method_code",
                "description": "Count the distinct values of payment_method_code to determine how many different payment methods customers can choose from."
            }
        },
        "label": "simple",
        "steps": [
            "Count the distinct values of payment_method_code to determine how many different payment methods customers can choose from."
        ],
        "db_id": "e_commerce",
        "id": 83,
        "generated_sql": "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods"
    },
    {
        "question": "What are the login names and passwords of the customers whose phone number have the prefix '+12'?",
        "knowledge": {
            "Tables": [
                "Customers"
            ],
            "Filter": {
                "attribute": "phone_number",
                "condition": "starts with '+12'"
            },
            "Attributes": [
                "login_name",
                "login_password"
            ]
        },
        "label": "simple",
        "steps": [
            "Filter the Customers table based on the condition that the phone number starts with the prefix '+12'.",
            "Retrieve the login names and passwords of the filtered customers."
        ],
        "db_id": "e_commerce",
        "id": 84,
        "generated_sql": "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'"
    },
    {
        "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?",
        "knowledge": {
            "Tables": [
                "Customers"
            ],
            "Filter": {
                "attribute": "phone_number",
                "condition": "starts with '+12'"
            },
            "Attributes": [
                "login_name",
                "login_password"
            ]
        },
        "label": "simple",
        "steps": [
            "Filter the Customers table based on the condition that the phone number starts with the prefix '+12'.",
            "Retrieve the usernames and passwords of the filtered customers."
        ],
        "db_id": "e_commerce",
        "id": 85,
        "generated_sql": "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'"
    },
    {
        "question": "What are the product sizes of the products whose name has the substring 'Dell'?",
        "knowledge": {
            "Tables": [
                "Products"
            ],
            "Filter": {
                "attribute": "product_name",
                "condition": "contains substring 'Dell'"
            },
            "Attributes": [
                "product_size"
            ]
        },
        "label": "simple",
        "steps": [
            "Filter the Products table based on the condition that the product name contains the substring 'Dell'.",
            "Retrieve the product sizes of the filtered products."
        ],
        "db_id": "e_commerce",
        "id": 86,
        "generated_sql": "SELECT DISTINCT product_size FROM Products WHERE product_name LIKE '%Dell%'"
    },
    {
        "question": "What are the sizes of all products whose name includes the word 'Dell'?",
        "knowledge": {
            "Tables": [
                "Products"
            ],
            "Filter": {
                "attribute": "product_name",
                "condition": "includes the word 'Dell'"
            },
            "Attributes": [
                "product_size"
            ]
        },
        "label": "simple",
        "steps": [
            "Filter the Products table based on the condition that the product name includes the word 'Dell'.",
            "Retrieve the sizes of the filtered products."
        ],
        "db_id": "e_commerce",
        "id": 87,
        "generated_sql": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%';"
    },
    {
        "question": "What are the product price and the product size of the products whose price is above average?",
        "knowledge": {
            "Tables": [
                "Products"
            ],
            "Attributes": [
                "product_price",
                "product_size"
            ],
            "Filter": {
                "condition": "price is above average"
            }
        },
        "label": "simple",
        "steps": [
            "Calculate the average price of all products.",
            "Filter the Products table to select products whose price is above the calculated average.",
            "Retrieve the product price and size for the filtered products."
        ],
        "db_id": "e_commerce",
        "id": 88,
        "generated_sql": "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)"
    },
    {
        "question": "What are the prices and sizes of all products whose price is above the mean?",
        "knowledge": {
            "Tables": [
                "Products"
            ],
            "Attributes": [
                "product_price",
                "product_size"
            ],
            "Filter": {
                "condition": "price is above the mean"
            }
        },
        "label": "simple",
        "steps": [
            "Calculate the mean (average) price of all products.",
            "Filter the Products table to select products whose price is above the calculated mean.",
            "Retrieve the prices and sizes of the filtered products."
        ],
        "db_id": "e_commerce",
        "id": 89,
        "generated_sql": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT AVG(product_price) FROM Products )"
    },
    {
        "question": "How many kinds of products have not been sold?",
        "knowledge": {
            "Tables": [
                "Products",
                "Order_Items"
            ],
            "Attributes": [
                "product_id",
                "order_item_id"
            ],
            "Join": {
                "type": "LEFT JOIN",
                "conditions": "Products.product_id = Order_Items.product_id"
            },
            "Filter": {
                "condition": "order_item_id IS NULL"
            }
        },
        "label": "nested",
        "steps": [
            "Join the Products table with the Order_Items table using LEFT JOIN on product_id.",
            "Filter the joined table to select rows where order_item_id is NULL, indicating unsold products.",
            "Count the number of distinct product types that have not been sold."
        ],
        "db_id": "e_commerce",
        "id": 90,
        "generated_sql": "SELECT COUNT(DISTINCT Products.product_id) AS unsold_product_count FROM Products LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Order_Items.order_item_id IS NULL"
    },
    {
        "question": "What is the number of products that have not been ordered yet?",
        "knowledge": {
            "Tables": [
                "Products",
                "Order_Items"
            ],
            "Attributes": [
                "product_id",
                "order_item_id"
            ],
            "Join": {
                "type": "LEFT JOIN",
                "conditions": "Products.product_id = Order_Items.product_id"
            },
            "Filter": {
                "condition": "order_item_id IS NULL"
            }
        },
        "label": "nested",
        "steps": [
            "Join the Products table with the Order_Items table using LEFT JOIN on product_id.",
            "Filter the joined table to select rows where order_item_id is NULL, indicating products that have not been ordered yet.",
            "Count the number of distinct products that have not been ordered yet."
        ],
        "db_id": "e_commerce",
        "id": 91,
        "generated_sql": "SELECT COUNT(DISTINCT product_id) AS not_ordered_products FROM Products LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE order_item_id IS NULL"
    },
    {
        "question": "How many customers do not have any payment method?",
        "knowledge": {
            "Tables": [
                "Customers",
                "Customer_Payment_Methods"
            ],
            "Attributes": [
                "customer_id",
                "payment_method_code"
            ],
            "Join": {
                "type": "LEFT JOIN",
                "conditions": "Customers.customer_id = Customer_Payment_Methods.customer_id"
            },
            "Filter": {
                "condition": "payment_method_code IS NULL"
            }
        },
        "label": "nested",
        "steps": [
            "Join the Customers table with the Customer_Payment_Methods table using LEFT JOIN on customer_id.",
            "Filter the joined table to select rows where payment_method_code is NULL, indicating customers without any payment method.",
            "Count the number of distinct customers without any payment method."
        ],
        "db_id": "e_commerce",
        "id": 92,
        "generated_sql": "SELECT count(DISTINCT T2.customer_id) FROM Customers AS T1 LEFT JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id WHERE T2.payment_method_code IS NULL"
    },
    {
        "question": "How many customers do not have a listed payment method?",
        "knowledge": {
            "Tables": [
                "Customers",
                "Customer_Payment_Methods"
            ],
            "Attributes": [
                "customer_id",
                "payment_method_code"
            ],
            "Join": {
                "type": "LEFT JOIN",
                "conditions": "Customers.customer_id = Customer_Payment_Methods.customer_id"
            },
            "Filter": {
                "condition": "payment_method_code IS NULL"
            }
        },
        "label": "nested",
        "steps": [
            "Join the Customers table with the Customer_Payment_Methods table using LEFT JOIN on customer_id.",
            "Filter the joined table to select rows where payment_method_code is NULL, indicating customers without a listed payment method.",
            "Count the number of distinct customers without a listed payment method."
        ],
        "db_id": "e_commerce",
        "id": 93,
        "generated_sql": "SELECT COUNT(DISTINCT customer_id) FROM Customers LEFT JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE payment_method_code IS NULL;"
    },
    {
        "question": "What are all the order status and all the dates of orders?",
        "knowledge": {
            "Tables": [
                "Orders"
            ],
            "Attributes": [
                "order_status_code",
                "date_order_placed"
            ]
        },
        "label": "simple",
        "steps": "Retrieve all distinct order statuses along with their corresponding order dates from the Orders table.",
        "db_id": "e_commerce",
        "id": 94,
        "generated_sql": "SELECT DISTINCT order_status_code ,  date_order_placed FROM Orders"
    },
    {
        "question": "What are the status codes and dates placed for all of the orders?",
        "knowledge": {
            "Tables": [
                "Orders"
            ],
            "Attributes": [
                "order_status_code",
                "date_order_placed"
            ]
        },
        "label": "simple",
        "steps": "Retrieve all order status codes and corresponding order placement dates from the Orders table.",
        "db_id": "e_commerce",
        "id": 95,
        "generated_sql": "SELECT order_status_code, date_order_placed FROM Orders"
    },
    {
        "question": "List the address, town and county information of the customers who live in the USA.",
        "knowledge": {
            "Tables": [
                "Customers"
            ],
            "Attributes": [
                "address_line_1",
                "town_city",
                "county"
            ],
            "Condition": "country = 'USA'"
        },
        "label": "simple",
        "steps": "Retrieve the address_line_1, town_city, and county information from the Customers table where the country is 'USA'.",
        "db_id": "e_commerce",
        "id": 96,
        "generated_sql": "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA'"
    },
    {
        "question": "What are the addresses, towns, and county information for all customers who live in the United States?",
        "knowledge": {
            "Tables": [
                "Customers"
            ],
            "Attributes": [
                "address_line_1",
                "town_city",
                "county"
            ],
            "Condition": "country = 'USA'"
        },
        "label": "simple",
        "steps": "Retrieve the address_line_1, town_city, and county information from the Customers table where the country is 'USA'.",
        "db_id": "e_commerce",
        "id": 97,
        "generated_sql": "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA'"
    },
    {
        "question": "List all the pairs of buyer first names and product names.",
        "knowledge": {
            "Tables": [
                "Customers",
                "Order_Items",
                "Products"
            ],
            "Attributes": [
                "customer_first_name",
                "product_name"
            ],
            "Joins": {
                "Order_Items": {
                    "Type": "INNER",
                    "Conditions": "Order_Items.product_id = Products.product_id AND Order_Items.order_id = Orders.order_id"
                },
                "Customers": {
                    "Type": "INNER",
                    "Conditions": "Customers.customer_id = Orders.customer_id"
                }
            }
        },
        "label": "nested",
        "steps": "Join the Customers table with Orders table on customer_id, then join the resulting table with Order_Items table on order_id and product_id, finally join with Products table on product_id.",
        "db_id": "e_commerce",
        "id": 98,
        "generated_sql": "SELECT Customers.customer_first_name, Products.product_name FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id"
    },
    {
        "question": "What are the first names of all buyers and what products did they buy? List them in pairs.",
        "knowledge": {
            "Tables": [
                "Customers",
                "Order_Items",
                "Products"
            ],
            "Attributes": [
                "customer_first_name",
                "product_name"
            ],
            "Joins": {
                "Order_Items": {
                    "Type": "INNER",
                    "Conditions": "Order_Items.product_id = Products.product_id AND Order_Items.order_id = Orders.order_id"
                },
                "Customers": {
                    "Type": "INNER",
                    "Conditions": "Customers.customer_id = Orders.customer_id"
                }
            }
        },
        "label": "nested",
        "steps": "Join the Customers table with Orders table on customer_id, then join the resulting table with Order_Items table on order_id and product_id, finally join with Products table on product_id.",
        "db_id": "e_commerce",
        "id": 99,
        "generated_sql": "SELECT t1.customer_first_name ,  t3.product_name FROM customers AS t1 INNER JOIN orders AS t2 ON t2.customer_id = t1.customer_id INNER JOIN order_items AS t3 ON t3.order_id = t2.order_id INNER JOIN products AS t4 ON t4.product_id = t3.product_id"
    },
    {
        "question": "How many items are shipped?",
        "knowledge": {
            "Tables": [
                "Shipments",
                "Shipment_Items"
            ],
            "Joins": {
                "Shipment_Items": {
                    "Type": "nested",
                    "Conditions": {
                        "Shipment_Items.shipment_id": "Shipments.shipment_id"
                    }
                }
            }
        },
        "label": "nested",
        "steps": [],
        "db_id": "e_commerce",
        "id": 100,
        "generated_sql": "SELECT COUNT(DISTINCT T1.shipment_id) FROM Shipment_Items AS T1 INNER JOIN Shipments AS T2 ON T1.shipment_id = T2.shipment_id"
    },
    {
        "question": "How many products have been shipped?",
        "knowledge": {
            "Tables": [
                "Shipment_Items"
            ],
            "Joins": {
                "Shipment_Items": {
                    "Type": "nested",
                    "Conditions": {
                        "Shipment_Items.order_item_id": "Order_Items.order_item_id",
                        "Order_Items.product_id": "Products.product_id"
                    }
                }
            }
        },
        "label": "nested",
        "steps": [],
        "db_id": "e_commerce",
        "id": 101,
        "generated_sql": "SELECT COUNT(DISTINCT T1.order_item_id) FROM Shipment_Items AS T1 INNER JOIN Order_Items AS T2 ON T1.order_item_id = T2.order_item_id INNER JOIN Products AS T3 ON T2.product_id = T3.product_id"
    },
    {
        "question": "What is the product average price?",
        "knowledge": {
            "Tables": [
                "Products"
            ],
            "label": "simple"
        },
        "steps": [],
        "db_id": "e_commerce",
        "id": 102,
        "generated_sql": "SELECT AVG(product_price) AS avg_price FROM Products;"
    },
    {
        "question": "How much do the products cost on average?",
        "knowledge": {
            "Tables": [
                "Products"
            ],
            "label": "simple"
        },
        "steps": [],
        "db_id": "e_commerce",
        "id": 103,
        "generated_sql": "SELECT AVG(product_price) FROM Products"
    },
    {
        "question": "What is the average price of the products being ordered?",
        "knowledge": {
            "Tables": [
                "Products",
                "Orders",
                "Order_Items"
            ],
            "Joins": [
                "Products.product_id = Order_Items.product_id",
                "Orders.order_id = Order_Items.order_id"
            ],
            "label": "nested"
        },
        "steps": [],
        "db_id": "e_commerce",
        "id": 104,
        "generated_sql": "SELECT AVG(product_price) FROM Products;"
    },
    {
        "question": "What is the price of all products being ordered on average?",
        "knowledge": {
            "Tables": [
                "Products",
                "Order_Items"
            ],
            "Joins": [
                "Products.product_id = Order_Items.product_id"
            ],
            "label": "nested"
        },
        "steps": [],
        "db_id": "e_commerce",
        "id": 105,
        "generated_sql": "SELECT avg(product_price) FROM Products AS t1 JOIN Order_Items AS t2 ON t1.product_id  =  t2.product_id"
    },
    {
        "question": "What are the email address, town and county of the customers who are of the least common gender?",
        "knowledge": {
            "Tables": [
                "Customers"
            ],
            "label": "simple",
            "steps": []
        },
        "db_id": "e_commerce",
        "id": 106,
        "generated_sql": "SELECT email_address ,  town_city ,  county FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?",
        "knowledge": {
            "Tables": [
                "Customers"
            ],
            "label": "simple",
            "steps": []
        },
        "db_id": "e_commerce",
        "id": 107,
        "generated_sql": "SELECT DISTINCT T3.email_address, T3.town_city, T3.county FROM Customers AS T3 INNER JOIN Orders AS T4 ON T3.customer_id = T4.customer_id ORDER BY COUNT(T4.order_id) ASC LIMIT 1"
    },
    {
        "question": "List the order date of the orders who are placed by customers with at least 2 payment methods.",
        "knowledge": {
            "Tables": [
                "Orders",
                "Customer_Payment_Methods"
            ],
            "Joins": {
                "Orders": [
                    "customer_id"
                ],
                "Customer_Payment_Methods": [
                    "customer_id"
                ]
            },
            "label": "nested",
            "steps": []
        },
        "db_id": "e_commerce",
        "id": 108,
        "generated_sql": "SELECT T1.date_order_placed FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_id IN ( SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING count(*)  >=  2 )"
    },
    {
        "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?",
        "knowledge": {
            "Tables": [
                "Orders",
                "Customer_Payment_Methods"
            ],
            "Joins": {
                "Orders": [
                    "customer_id"
                ],
                "Customer_Payment_Methods": [
                    "customer_id"
                ]
            },
            "label": "nested",
            "steps": []
        },
        "db_id": "e_commerce",
        "id": 109,
        "generated_sql": "SELECT T1.date_order_placed FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id JOIN Customer_Payment_Methods AS T3 ON T2.customer_id = T3.customer_id GROUP BY T3.customer_id HAVING COUNT(*) >= 2"
    },
    {
        "question": "What is the most uncommon order status?",
        "knowledge": {
            "Tables": {
                "Orders": {
                    "Columns": [
                        "order_status_code"
                    ]
                }
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the count of each unique order status from the Orders table.",
            "Identify the order status with the lowest count, as it would be the most uncommon."
        ],
        "db_id": "e_commerce",
        "id": 110,
        "generated_sql": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question": "What is the least common order status?",
        "knowledge": {
            "Tables": {
                "Orders": {
                    "Columns": [
                        "order_status_code"
                    ]
                }
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the count of each unique order status from the Orders table.",
            "Identify the order status with the lowest count, as it would be the least common."
        ],
        "db_id": "e_commerce",
        "id": 111,
        "generated_sql": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "question": "For all the products sold for more than 3 times, list their id and description.",
        "knowledge": {
            "Tables": {
                "Products": {
                    "Columns": [
                        "product_id",
                        "product_description"
                    ]
                },
                "Order_Items": {
                    "Columns": [
                        "product_id"
                    ],
                    "Relationships": [
                        {
                            "Type": "ManyToOne",
                            "Related_Table": "Products",
                            "Foreign_Key": "product_id"
                        }
                    ]
                }
            }
        },
        "label": "nested",
        "steps": [
            "Count the occurrences of each product in the Order_Items table.",
            "Filter out the products that were sold more than 3 times.",
            "Retrieve the product id and description of the filtered products from the Products table."
        ],
        "db_id": "e_commerce",
        "id": 112,
        "generated_sql": "SELECT `product_id` FROM `Order_Items` GROUP BY `product_id` HAVING count(`order_item_id`)  >  3"
    },
    {
        "question": "For all products sold more than 3 times, what are their ids and descriptions?",
        "knowledge": {
            "Tables": {
                "Products": {
                    "Columns": [
                        "product_id",
                        "product_description"
                    ]
                },
                "Order_Items": {
                    "Columns": [
                        "product_id"
                    ],
                    "Relationships": [
                        {
                            "Type": "ManyToOne",
                            "Related_Table": "Products",
                            "Foreign_Key": "product_id"
                        }
                    ]
                }
            }
        },
        "label": "nested",
        "steps": [
            "Count the occurrences of each product in the Order_Items table.",
            "Filter out the products that were sold more than 3 times.",
            "Retrieve the product id and description of the filtered products from the Products table."
        ],
        "db_id": "e_commerce",
        "id": 113,
        "generated_sql": "SELECT DISTINCT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING COUNT(*)  >  3"
    },
    {
        "question": "List the invoice dates and ids of the invoices causing at least 2 shipments.",
        "knowledge": {
            "Tables": {
                "Invoices": {
                    "Columns": [
                        "invoice_number",
                        "invoice_date"
                    ]
                },
                "Shipments": {
                    "Columns": [
                        "invoice_number"
                    ],
                    "Aggregation": {
                        "Condition": "COUNT(*) >= 2",
                        "Group_By": [
                            "invoice_number"
                        ]
                    }
                }
            }
        },
        "label": "nested",
        "steps": [
            "Count the number of shipments for each invoice in the Shipments table.",
            "Filter out the invoices with at least 2 shipments.",
            "Retrieve the invoice number and date from the Invoices table for the filtered invoices."
        ],
        "db_id": "e_commerce",
        "id": 114,
        "generated_sql": "SELECT Invoice_date , Invoice_number FROM INVOICES WHERE Invoice_number IN (SELECT Invoice_number FROM Shipments GROUP BY Invoice_number HAVING COUNT(*) >= 2)"
    },
    {
        "question": "What are the dates and ids of the invoices that are related to at least 2 shipments?",
        "knowledge": {
            "Tables": {
                "Invoices": {
                    "Columns": [
                        "invoice_number",
                        "invoice_date"
                    ]
                },
                "Shipments": {
                    "Columns": [
                        "invoice_number"
                    ],
                    "Aggregation": {
                        "Condition": "COUNT(*) >= 2",
                        "Group_By": [
                            "invoice_number"
                        ]
                    }
                }
            }
        },
        "label": "nested",
        "steps": [
            "Count the number of shipments for each invoice in the Shipments table.",
            "Filter out the invoices with at least 2 shipments.",
            "Retrieve the invoice number and date from the Invoices table for the filtered invoices."
        ],
        "db_id": "e_commerce",
        "id": 115,
        "generated_sql": "SELECT T2.invoice_date ,  T2.invoice_number FROM Shipments AS T1 JOIN Invoices AS T2 ON T2.invoice_number = T1.invoice_number GROUP BY T1.invoice_number HAVING COUNT(T1.invoice_number) >= 2"
    },
    {
        "question": "what are all shipment tracking numbers and shipment dates?",
        "knowledge": {
            "Tables": {
                "Shipments": {
                    "Columns": [
                        "shipment_tracking_number",
                        "shipment_date"
                    ]
                }
            }
        },
        "label": "simple",
        "steps": "Retrieve shipment tracking numbers and shipment dates from the Shipments table.",
        "db_id": "e_commerce",
        "id": 116,
        "generated_sql": "SELECT shipment_tracking_number, shipment_date FROM Shipments"
    },
    {
        "question": "What are the tracking numbers and dates for all shipments listed?",
        "knowledge": {
            "Tables": {
                "Shipments": {
                    "Columns": [
                        "shipment_tracking_number",
                        "shipment_date"
                    ]
                }
            }
        },
        "label": "simple",
        "steps": "Retrieve shipment tracking numbers and dates from the Shipments table.",
        "db_id": "e_commerce",
        "id": 117,
        "generated_sql": "SELECT shipment_tracking_number, shipment_date FROM Shipments;"
    },
    {
        "question": "What are the color, description and size of the products priced below the maximum price.",
        "knowledge": {
            "Tables": {
                "Products": {
                    "Columns": [
                        "product_color",
                        "product_description",
                        "product_size",
                        "product_price"
                    ]
                }
            }
        },
        "label": "simple",
        "steps": "Identify the maximum price among the products. Then retrieve the color, description, and size of the products with prices below the maximum.",
        "db_id": "e_commerce",
        "id": 118,
        "generated_sql": "SELECT product_color, product_description, product_size FROM Products WHERE product_price < ( SELECT MAX(product_price) FROM Products )"
    },
    {
        "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?",
        "knowledge": {
            "Tables": {
                "Products": {
                    "Columns": [
                        "product_color",
                        "product_description",
                        "product_size",
                        "product_price"
                    ]
                }
            }
        },
        "label": "simple",
        "steps": "Identify the maximum price among the products. Then retrieve the color, description, and size of the products with prices lower than the maximum.",
        "db_id": "e_commerce",
        "id": 119,
        "generated_sql": "SELECT product_color, product_size FROM Products WHERE product_price < ( SELECT max(product_price) FROM Products )"
    },
    {
        "question": "Return the names of directors who are older than the average age.",
        "knowledge": {
            "tables": {
                "director": {
                    "columns": {
                        "Director_ID": "int",
                        "Name": "text",
                        "Age": "int"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Calculate the average age of all directors",
            "Select the names of directors whose age is greater than the average age"
        ],
        "db_id": "bbc_channels",
        "id": 120,
        "generated_sql": "SELECT name FROM director WHERE age  >  (SELECT avg(age) FROM director)"
    },
    {
        "question": "Find the the name of the oldest director.",
        "knowledge": {
            "tables": {
                "director": {
                    "columns": {
                        "Director_ID": "int",
                        "Name": "text",
                        "Age": "int"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Identify the maximum age among all directors",
            "Select the name of the director with the maximum age"
        ],
        "db_id": "bbc_channels",
        "id": 121,
        "generated_sql": "SELECT Name FROM director ORDER BY Age DESC LIMIT 1"
    },
    {
        "question": "How many channels have the word 'bbc' in their internet link?",
        "knowledge": {
            "tables": {
                "channel": {
                    "columns": {
                        "Channel_ID": "int",
                        "Name": "text",
                        "Analogue_terrestrial_channel": "text",
                        "Digital_terrestrial_channel": "text",
                        "Internet": "text"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of channels where the 'Internet' column contains the word 'bbc'"
        ],
        "db_id": "bbc_channels",
        "id": 122,
        "generated_sql": "SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%';"
    },
    {
        "question": "How many different digital terrestrial channels are there?",
        "knowledge": {
            "tables": {
                "channel": {
                    "columns": {
                        "Channel_ID": "int",
                        "Name": "text",
                        "Analogue_terrestrial_channel": "text",
                        "Digital_terrestrial_channel": "text",
                        "Internet": "text"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Count the distinct values in the 'Digital_terrestrial_channel' column of the 'channel' table"
        ],
        "db_id": "bbc_channels",
        "id": 123,
        "generated_sql": "SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel"
    },
    {
        "question": "List all program titles in the order of starting year. List the most recent one first.",
        "knowledge": {
            "tables": {
                "program": {
                    "columns": {
                        "Program_ID": "int",
                        "Start_Year": "real",
                        "Title": "text",
                        "Director_ID": "int",
                        "Channel_ID": "int"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Select all program titles from the 'program' table",
            "Order the results by 'Start_Year' in descending order"
        ],
        "db_id": "bbc_channels",
        "id": 124,
        "generated_sql": "SELECT Title FROM program ORDER BY Start_Year DESC"
    },
    {
        "question": "Which director is in charge of the most programs?",
        "knowledge": {
            "tables": {
                "director": {
                    "columns": {
                        "Director_ID": "int",
                        "Name": "text",
                        "Age": "int"
                    }
                },
                "program": {
                    "columns": {
                        "Program_ID": "int",
                        "Start_Year": "real",
                        "Title": "text",
                        "Director_ID": "int",
                        "Channel_ID": "int"
                    }
                }
            }
        },
        "label": "nested",
        "steps": [
            "Count the number of programs each director is in charge of",
            "Identify the director with the highest count of programs",
            "Select the name of that director"
        ],
        "db_id": "bbc_channels",
        "id": 125,
        "generated_sql": "SELECT T1.name FROM director AS T1 JOIN program AS T2 ON T1.director_id = T2.director_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "question": "Find the name and age of the director who is in charge of the most programs?",
        "knowledge": {
            "tables": {
                "director": {
                    "columns": {
                        "Director_ID": "int",
                        "Name": "text",
                        "Age": "int"
                    }
                },
                "program": {
                    "columns": {
                        "Program_ID": "int",
                        "Start_Year": "real",
                        "Title": "text",
                        "Director_ID": "int",
                        "Channel_ID": "int"
                    }
                }
            }
        },
        "label": "nested",
        "steps": [
            "Count the number of programs each director is in charge of",
            "Identify the director with the highest count of programs",
            "Select the name and age of that director"
        ],
        "db_id": "bbc_channels",
        "id": 126,
        "generated_sql": "SELECT T2.Name, T2.Age FROM director_admin AS T1 JOIN director AS T2 ON T1.Director_ID = T2.Director_ID GROUP BY T1.Director_ID ORDER BY COUNT(T1.Director_ID) DESC LIMIT 1"
    },
    {
        "question": "Return the title of the program that began most recently.",
        "knowledge": {
            "tables": {
                "program": {
                    "columns": {
                        "Program_ID": "int",
                        "Start_Year": "real",
                        "Title": "text",
                        "Director_ID": "int",
                        "Channel_ID": "int"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Select the title of the program with the most recent start year from the 'program' table"
        ],
        "db_id": "bbc_channels",
        "id": 127,
        "generated_sql": "SELECT Title FROM program ORDER BY Start_Year DESC LIMIT 1"
    },
    {
        "question": "Find the name and website link of the channels that have more than one program.",
        "knowledge": {
            "tables": {
                "channel": {
                    "columns": {
                        "Channel_ID": "int",
                        "Name": "text",
                        "Internet": "text"
                    }
                },
                "program": {
                    "columns": {
                        "Channel_ID": "int"
                    }
                }
            }
        },
        "label": "nested",
        "steps": [
            "Count the number of programs for each channel from the 'program' table",
            "Filter channels with more than one program",
            "Select the name and internet link of these channels from the 'channel' table"
        ],
        "db_id": "bbc_channels",
        "id": 128,
        "generated_sql": "SELECT T1.Name, T1.Internet FROM channel AS T1 JOIN program AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T2.Channel_ID HAVING COUNT(*) > 1"
    },
    {
        "question": "Find the number of programs for each channel. Return the name of each channel as well.",
        "knowledge": {
            "tables": {
                "channel": {
                    "columns": {
                        "Channel_ID": "int",
                        "Name": "text"
                    }
                },
                "program": {
                    "columns": {
                        "Channel_ID": "int"
                    }
                }
            }
        },
        "label": "nested",
        "steps": [
            "Count the number of programs for each channel from the 'program' table",
            "Join the result with the 'channel' table to get the name of each channel"
        ],
        "db_id": "bbc_channels",
        "id": 129,
        "generated_sql": "SELECT T1.Name, COUNT(*) FROM channel AS T1 JOIN program AS T2 ON T1.Channel_ID  =  T2.Channel_ID GROUP BY T2.Channel_ID"
    },
    {
        "question": "Find the number of channels that do not run any program.",
        "knowledge": {
            "tables": {
                "channel": {
                    "columns": {
                        "Channel_ID": "int",
                        "Name": "text"
                    }
                },
                "program": {
                    "columns": {
                        "Channel_ID": "int"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of distinct channels from the 'channel' table that do not have any corresponding entries in the 'program' table"
        ],
        "db_id": "bbc_channels",
        "id": 130,
        "generated_sql": "SELECT COUNT(DISTINCT t1.Channel_ID) FROM channel AS t1 LEFT JOIN program AS t2 ON t1.Channel_ID = t2.Channel_ID WHERE t2.Channel_ID IS NULL"
    },
    {
        "question": "What is the name of the director who is in the \"Dracula\" program?",
        "knowledge": {
            "tables": {
                "program": {
                    "columns": {
                        "Director_ID": "int"
                    }
                },
                "director": {
                    "columns": {
                        "Director_ID": "int",
                        "Name": "text"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the director's name from the 'director' table where the 'Director_ID' matches the one associated with the 'Dracula' program in the 'program' table."
        ],
        "db_id": "bbc_channels",
        "id": 131,
        "generated_sql": "SELECT T1.Name FROM director AS T1 JOIN program AS T2 ON T1.Director_ID = T2.Director_ID WHERE T2.Title = \"Dracula\";"
    },
    {
        "question": "Find the name and internet web of the channel that is directed by the most directors.",
        "knowledge": {
            "tables": {
                "channel": {
                    "columns": {
                        "Name": "text",
                        "Internet": "text"
                    }
                },
                "director_admin": {
                    "columns": {
                        "Channel_ID": "int",
                        "Director_ID": "int"
                    }
                }
            }
        },
        "label": "nested",
        "steps": [
            "Count the number of directors associated with each channel from the 'director_admin' table.",
            "Identify the channel with the maximum count of directors.",
            "Retrieve the name and internet web of the identified channel from the 'channel' table."
        ],
        "db_id": "bbc_channels",
        "id": 132,
        "generated_sql": "SELECT C.Name, C.Internet  FROM channel C  INNER JOIN director_admin DA ON C.Channel_ID = DA.Channel_ID  GROUP BY C.Channel_ID  ORDER BY COUNT(DA.Director_ID) DESC  LIMIT 1"
    },
    {
        "question": "Find the name of the directors whose age is between 30 and 60.",
        "knowledge": {
            "tables": {
                "director": {
                    "columns": {
                        "Name": "text",
                        "Age": "int"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Query the 'director' table to select the names of directors.",
            "Filter the directors based on their age, selecting only those whose age is between 30 and 60."
        ],
        "db_id": "bbc_channels",
        "id": 133,
        "generated_sql": "SELECT Name FROM director WHERE Age BETWEEN 30 AND 60"
    },
    {
        "question": "give me the name of channels that have both a director younger than 40 and a director older than 60.",
        "knowledge": {
            "tables": {
                "channel": {
                    "columns": {
                        "Name": "text"
                    }
                },
                "director": {
                    "columns": {
                        "Director_ID": "int",
                        "Age": "int"
                    }
                },
                "director_admin": {
                    "columns": {
                        "Director_ID": "int",
                        "Channel_ID": "int"
                    },
                    "foreign_keys": [
                        {
                            "from": "Director_ID",
                            "to_table": "director",
                            "to_column": "Director_ID"
                        },
                        {
                            "from": "Channel_ID",
                            "to_table": "channel",
                            "to_column": "Channel_ID"
                        }
                    ]
                }
            }
        },
        "label": "nested",
        "steps": [
            "Join the 'director' table with the 'director_admin' table to associate directors with channels.",
            "Filter the directors based on their age, selecting those younger than 40 and those older than 60 separately.",
            "Group the directors by channel, counting how many directors younger than 40 and older than 60 each channel has.",
            "Select the channels that have both directors younger than 40 and directors older than 60."
        ],
        "db_id": "bbc_channels",
        "id": 134,
        "generated_sql": "SELECT DISTINCT T1.Name FROM channel AS T1 JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID JOIN director AS T3 ON T3.Director_ID = T2.Director_ID WHERE T3.Age < 40 AND T2.Is_first_director = 'T' INTERSECT SELECT DISTINCT T1.Name FROM channel AS T1 JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID JOIN director AS T3 ON T3.Director_ID = T2.Director_ID WHERE T3.Age > 60 AND T2.Is_first_director = 'T'"
    },
    {
        "question": "Find the id and name of the channel that is not directed by Hank Baskett.",
        "knowledge": {
            "tables": {
                "channel": {
                    "columns": {
                        "Channel_ID": "int",
                        "Name": "text"
                    }
                },
                "director": {
                    "columns": {
                        "Director_ID": "int",
                        "Name": "text"
                    }
                },
                "director_admin": {
                    "columns": {
                        "Director_ID": "int",
                        "Channel_ID": "int"
                    },
                    "foreign_keys": [
                        {
                            "from": "Director_ID",
                            "to_table": "director",
                            "to_column": "Director_ID"
                        },
                        {
                            "from": "Channel_ID",
                            "to_table": "channel",
                            "to_column": "Channel_ID"
                        }
                    ]
                }
            }
        },
        "label": "nested",
        "steps": [
            "Join the 'director' table with the 'director_admin' table to associate directors with channels.",
            "Filter the channels by those not directed by Hank Baskett using the 'director' table.",
            "Select the id and name of the filtered channels."
        ],
        "db_id": "bbc_channels",
        "id": 135,
        "generated_sql": "SELECT channel.Channel_ID, channel.Name FROM director_admin JOIN channel ON director_admin.Channel_ID = channel.Channel_ID JOIN director ON director_admin.Director_ID = director.Director_ID WHERE director.Name != 'Hank Baskett'"
    },
    {
        "question": "How many radios are there?",
        "knowledge": {
            "tables": {
                "radio": {
                    "columns": {
                        "Radio_ID": "int"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of rows in the 'radio' table."
        ],
        "db_id": "tv_shows",
        "id": 136,
        "generated_sql": "SELECT COUNT(*) FROM radio"
    },
    {
        "question": "List the transmitters of radios in ascending order of erp kw .",
        "knowledge": {
            "tables": {
                "radio": {
                    "columns": {
                        "Radio_ID": "int",
                        "Transmitter": "text",
                        "ERP_kW": "text"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Transmitter' column from the 'radio' table.",
            "Sort the transmitters in ascending order based on the 'ERP_kW' column."
        ],
        "db_id": "tv_shows",
        "id": 137,
        "generated_sql": "SELECT Transmitter FROM radio ORDER BY ERP_kW ASC;"
    },
    {
        "question": "What are the names and original air dates of tv shows?",
        "knowledge": {
            "tables": {
                "tv_show": {
                    "columns": {
                        "tv_show_name": "text",
                        "Original_Airdate": "text"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'tv_show_name' and 'Original_Airdate' columns from the 'tv_show' table."
        ],
        "db_id": "tv_shows",
        "id": 138,
        "generated_sql": "SELECT tv_show_name, Original_Airdate FROM tv_show"
    },
    {
        "question": "List the station names of city channels whose affiliation is not \"ABC\".",
        "knowledge": {
            "tables": {
                "city_channel": {
                    "columns": {
                        "Station_name": "text",
                        "Affiliation": "text"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Station_name' column from the 'city_channel' table where the 'Affiliation' is not 'ABC'."
        ],
        "db_id": "tv_shows",
        "id": 139,
        "generated_sql": "SELECT Station_name FROM city_channel WHERE Affiliation != 'ABC';"
    },
    {
        "question": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.",
        "knowledge": {
            "tables": {
                "radio": {
                    "columns": {
                        "Transmitter": "text",
                        "ERP_kW": "text"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Filter the 'radio' table to select rows where ERP is bigger than 150 or smaller than 30.",
            "Retrieve the 'Transmitter' column for the filtered rows."
        ],
        "db_id": "tv_shows",
        "id": 140,
        "generated_sql": "SELECT Transmitter FROM radio WHERE CAST(REPLACE(ERP_kW, ',', '') AS REAL) > 150 OR CAST(REPLACE(ERP_kW, ',', '') AS REAL) < 30"
    },
    {
        "question": "What is the transmitter of the radio with the largest ERP_kW?",
        "knowledge": {
            "tables": {
                "radio": {
                    "columns": {
                        "Transmitter": "text",
                        "ERP_kW": "text"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Transmitter' column from the 'radio' table.",
            "Identify the row with the largest value in the 'ERP_kW' column.",
            "Get the transmitter associated with the identified row."
        ],
        "db_id": "tv_shows",
        "id": 141,
        "generated_sql": "SELECT Transmitter FROM radio ORDER BY CAST(REPLACE(ERP_kW, ',', '') AS REAL) DESC LIMIT 1"
    },
    {
        "question": "What is the average ERP across all radios?",
        "knowledge": {
            "tables": {
                "radio": {
                    "columns": {
                        "ERP_kW": "text"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'ERP_kW' column from the 'radio' table.",
            "Calculate the average value of the 'ERP_kW' column."
        ],
        "db_id": "tv_shows",
        "id": 142,
        "generated_sql": "SELECT AVG(ERP_kW) FROM radio"
    },
    {
        "question": "Show the different affiliations of city channels and the number of city channels with each affiliation.",
        "knowledge": {
            "tables": {
                "city_channel": {
                    "columns": {
                        "Affiliation": "text"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Affiliation' column from the 'city_channel' table.",
            "Count the number of occurrences of each unique affiliation."
        ],
        "db_id": "tv_shows",
        "id": 143,
        "generated_sql": "SELECT Affiliation ,  COUNT(*) FROM city_channel GROUP BY Affiliation"
    },
    {
        "question": "Please show the most common affiliation for city channels.",
        "knowledge": {
            "tables": {
                "city_channel": {
                    "columns": {
                        "Affiliation": "text"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Count the occurrences of each affiliation in the 'Affiliation' column of the 'city_channel' table.",
            "Retrieve the affiliation with the highest count."
        ],
        "db_id": "tv_shows",
        "id": 144,
        "generated_sql": "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "List the affiliations shared by more than three city channels.",
        "knowledge": {
            "tables": {
                "city_channel": {
                    "columns": {
                        "Affiliation": "text"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Count the occurrences of each affiliation in the 'Affiliation' column of the 'city_channel' table.",
            "Filter out the affiliations with a count greater than three."
        ],
        "db_id": "tv_shows",
        "id": 145,
        "generated_sql": "SELECT Affiliation  FROM city_channel  GROUP BY Affiliation  HAVING COUNT(*) > 3"
    },
    {
        "question": "Show the cities and station names of city channels in ascending alphabetical order of station name.",
        "knowledge": {
            "tables": {
                "city_channel": {
                    "columns": {
                        "City": "text",
                        "Station_name": "text"
                    }
                }
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'City' and 'Station_name' columns from the 'city_channel' table.",
            "Sort the results in ascending alphabetical order of the 'Station_name' column."
        ],
        "db_id": "tv_shows",
        "id": 146,
        "generated_sql": "SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC;"
    },
    {
        "question": "Show the transmitters of radios and the cities of the channels they are associated with.",
        "knowledge": {
            "tables": {
                "city_channel": {
                    "columns": {
                        "City": "text"
                    }
                },
                "radio": {
                    "columns": {
                        "Transmitter": "text"
                    }
                },
                "city_channel_radio": {
                    "foreign_keys": {
                        "City_channel_ID": "city_channel(ID)",
                        "Radio_ID": "radio(Radio_ID)"
                    }
                }
            }
        },
        "label": "nested",
        "steps": [
            "Join the 'city_channel_radio' table with the 'city_channel' table using 'City_channel_ID'.",
            "Join the result with the 'radio' table using 'Radio_ID'.",
            "Select the 'Transmitter' column from the 'radio' table and the 'City' column from the 'city_channel' table."
        ],
        "db_id": "tv_shows",
        "id": 147,
        "generated_sql": "SELECT T2.Transmitter, T1.City FROM city_channel AS T1 JOIN city_channel_radio AS T3 ON T1.ID = T3.City_channel_ID JOIN radio AS T2 ON T3.Radio_ID = T2.Radio_ID"
    },
    {
        "question": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.",
        "knowledge": {
            "tables": {
                "city_channel": {
                    "columns": {
                        "Station_name": "text"
                    }
                },
                "radio": {
                    "columns": {
                        "Transmitter": "text",
                        "ERP_kW": "text"
                    }
                },
                "city_channel_radio": {
                    "foreign_keys": {
                        "City_channel_ID": "city_channel(ID)",
                        "Radio_ID": "radio(Radio_ID)"
                    }
                }
            }
        },
        "label": "nested",
        "steps": [
            "Join the 'city_channel_radio' table with the 'city_channel' table using 'City_channel_ID'.",
            "Join the result with the 'radio' table using 'Radio_ID'.",
            "Select the 'Transmitter' column from the 'radio' table and the 'Station_name' column from the 'city_channel' table.",
            "Order the result by the 'ERP_kW' column of the 'radio' table in descending order."
        ],
        "db_id": "tv_shows",
        "id": 148,
        "generated_sql": "SELECT T3.Transmitter, T1.Station_name FROM city_channel AS T1 JOIN city_channel_radio AS T2 ON T1.ID  =  T2.City_channel_ID JOIN radio AS T3 ON T3.Radio_ID  =  T2.Radio_ID ORDER BY T3.ERP_kW DESC"
    },
    {
        "question": "Show the transmitters of the radios and the number of city channels they are associated with.",
        "knowledge": {
            "tables": {
                "radio": {
                    "columns": {
                        "Transmitter": "text"
                    }
                },
                "city_channel_radio": {
                    "columns": {
                        "Radio_ID": "int"
                    },
                    "foreign_keys": {
                        "Radio_ID": "radio(Radio_ID)"
                    }
                }
            }
        },
        "label": "nested",
        "steps": [
            "Group the 'city_channel_radio' table by the 'Radio_ID' column.",
            "Count the number of rows in each group to find the number of city channels associated with each transmitter.",
            "Select the 'Transmitter' column from the 'radio' table and the count of rows for each transmitter."
        ],
        "db_id": "tv_shows",
        "id": 149,
        "generated_sql": "SELECT T1.Transmitter ,  COUNT(*) FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T1.Transmitter"
    },
    {
        "question": "Show the distinct transmitters of radios that are not associated with any city channel.",
        "knowledge": {
            "tables": {
                "city_channel": {
                    "columns": [
                        "ID",
                        "City",
                        "Station_name",
                        "Owned_Since",
                        "Affiliation"
                    ]
                },
                "radio": {
                    "columns": [
                        "Radio_ID",
                        "Transmitter",
                        "Radio_MHz",
                        "2FM_MHz",
                        "RnaG_MHz",
                        "Lyric_FM_MHz",
                        "ERP_kW"
                    ]
                },
                "city_channel_radio": {
                    "columns": [
                        "City_channel_ID",
                        "Radio_ID",
                        "Is_online"
                    ],
                    "evidence": "This table associates radios with city channels."
                }
            }
        },
        "label": "nested",
        "steps": [
            "Find the distinct transmitters from the 'radio' table.",
            "Exclude transmitters associated with any city channel using the 'city_channel_radio' table."
        ],
        "db_id": "tv_shows",
        "id": 150,
        "generated_sql": "SELECT DISTINCT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)"
    },
    {
        "question": "What is the model of the vehicle with maximum top speed whose power is higher than 6000?",
        "knowledge": {
            "tables": {
                "vehicle": {
                    "columns": [
                        "Vehicle_ID",
                        "Model",
                        "Build_Year",
                        "Top_Speed",
                        "Power",
                        "Builder",
                        "Total_Production"
                    ],
                    "evidence": "Contains information about vehicles including their model, top speed, and power."
                }
            }
        },
        "label": "simple",
        "steps": [
            "Filter vehicles with power higher than 6000.",
            "Find the vehicle with the maximum top speed among the filtered vehicles.",
            "Retrieve the model of the vehicle."
        ],
        "db_id": "vehicle_driver",
        "id": 151,
        "generated_sql": "SELECT T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID  =  T2.Vehicle_ID JOIN driver AS T3 ON T2.Driver_ID  =  T3.Driver_ID WHERE T1.Power  >  6000 AND T1.Top_Speed  =  (SELECT MAX(Top_Speed) FROM vehicle WHERE Power  >  6000)"
    },
    {
        "question": "Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.",
        "knowledge": {
            "tables": {
                "vehicle": {
                    "columns": [
                        "Vehicle_ID",
                        "Model",
                        "Build_Year",
                        "Top_Speed",
                        "Power",
                        "Builder",
                        "Total_Production"
                    ],
                    "evidence": "Contains information about vehicles including their model, top speed, and power."
                }
            }
        },
        "label": "simple",
        "steps": [
            "Filter vehicles with power over 6000.",
            "Among the filtered vehicles, find the one with the greatest top speed.",
            "Return the model of that vehicle."
        ],
        "db_id": "vehicle_driver",
        "id": 152,
        "generated_sql": "SELECT Model FROM vehicle WHERE Power  >  6000 ORDER BY Top_Speed DESC LIMIT 1"
    },
    {
        "question": "What are the names of the drivers who are citizens of the 'United States'?",
        "knowledge": {
            "tables": {
                "driver": {
                    "columns": [
                        "Driver_ID",
                        "Name",
                        "Citizenship",
                        "Racing_Series"
                    ],
                    "evidence": "Contains information about drivers including their names and citizenship."
                }
            }
        },
        "label": "simple",
        "steps": [
            "Filter drivers whose citizenship is 'United States'.",
            "Retrieve the names of the filtered drivers."
        ],
        "db_id": "vehicle_driver",
        "id": 153,
        "generated_sql": "SELECT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Citizenship = 'United States'"
    },
    {
        "question": "Return the names of drivers with citizenship from the United States.",
        "knowledge": {
            "tables": {
                "driver": {
                    "columns": [
                        "Driver_ID",
                        "Name",
                        "Citizenship",
                        "Racing_Series"
                    ],
                    "evidence": "Contains information about drivers including their names and citizenship."
                }
            }
        },
        "label": "simple",
        "steps": [
            "Filter drivers whose citizenship is 'United States'.",
            "Retrieve the names of the filtered drivers."
        ],
        "db_id": "vehicle_driver",
        "id": 154,
        "generated_sql": "SELECT Name FROM driver WHERE Citizenship = \"United States\""
    },
    {
        "question": "How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?",
        "knowledge": {
            "tables": {
                "driver": {
                    "columns": [
                        "Driver_ID",
                        "Name",
                        "Citizenship",
                        "Racing_Series"
                    ],
                    "evidence": "Contains information about drivers including their names and driver IDs."
                },
                "vehicle_driver": {
                    "columns": [
                        "Driver_ID",
                        "Vehicle_ID"
                    ],
                    "evidence": "Associates drivers with vehicles, indicating which driver has driven which vehicle."
                }
            }
        },
        "label": "nested",
        "steps": [
            "Count the number of vehicles driven by each driver.",
            "Find the maximum count of vehicles driven by a driver.",
            "Retrieve the driver ID of the driver who has driven the maximum number of vehicles."
        ],
        "db_id": "vehicle_driver",
        "id": 155,
        "generated_sql": "SELECT MAX(COUNT(Vehicle_ID)) as Max_Vehicles, Driver_ID FROM vehicle_driver GROUP BY Driver_ID"
    },
    {
        "question": "What is the id of the driver who has driven the most vehicles, and how many vehicles is this?",
        "knowledge": {
            "tables": {
                "driver": {
                    "columns": [
                        "Driver_ID",
                        "Name",
                        "Citizenship",
                        "Racing_Series"
                    ],
                    "evidence": "Contains information about drivers including their driver IDs."
                },
                "vehicle_driver": {
                    "columns": [
                        "Driver_ID",
                        "Vehicle_ID"
                    ],
                    "evidence": "Associates drivers with vehicles, indicating which driver has driven which vehicle."
                }
            }
        },
        "label": "nested",
        "steps": [
            "Count the number of vehicles driven by each driver.",
            "Find the maximum count of vehicles driven by a driver.",
            "Retrieve the driver ID of the driver who has driven the maximum number of vehicles."
        ],
        "db_id": "vehicle_driver",
        "id": 156,
        "generated_sql": "SELECT Driver_ID FROM vehicle_driver GROUP BY Driver_ID ORDER BY COUNT(Vehicle_ID) DESC LIMIT 1"
    },
    {
        "question": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?",
        "knowledge": {
            "tables": {
                "vehicle": {
                    "columns": [
                        "Vehicle_ID",
                        "Model",
                        "Build_Year",
                        "Top_Speed",
                        "Power",
                        "Builder",
                        "Total_Production"
                    ],
                    "evidence": "Contains information about vehicles including their power and manufacturer."
                }
            }
        },
        "label": "simple",
        "steps": [
            "Filter vehicles manufactured by 'Zhuzhou'.",
            "Calculate the maximum power among these vehicles.",
            "Calculate the average power among these vehicles."
        ],
        "db_id": "vehicle_driver",
        "id": 157,
        "generated_sql": "SELECT MAX(Power) ,  AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou';"
    },
    {
        "question": "Return the maximum and average power for the vehicles built by Zhuzhou.",
        "knowledge": {
            "tables": {
                "vehicle": {
                    "columns": [
                        "Vehicle_ID",
                        "Model",
                        "Build_Year",
                        "Top_Speed",
                        "Power",
                        "Builder",
                        "Total_Production"
                    ],
                    "evidence": "Contains information about vehicles including their power and manufacturer."
                }
            }
        },
        "label": "simple",
        "steps": [
            "Filter vehicles built by 'Zhuzhou'.",
            "Calculate the maximum power among these vehicles.",
            "Calculate the average power among these vehicles."
        ],
        "db_id": "vehicle_driver",
        "id": 158,
        "generated_sql": "SELECT max(T2.Power) ,  avg(T2.Power) FROM vehicle AS T1 JOIN vehicle_driver AS T3 ON T1.Vehicle_ID  =  T3.Vehicle_ID JOIN driver AS T2 ON T3.Driver_ID  =  T2.Driver_ID WHERE T1.Builder  =  \"Zhuzhou\""
    },
    {
        "question": "What is the id of the vehicle driven for the least times for the vehicles ever used?",
        "knowledge": {
            "tables": {
                "vehicle_driver": {
                    "columns": [
                        "Driver_ID",
                        "Vehicle_ID"
                    ],
                    "evidence": "Associates drivers with vehicles, indicating which vehicle each driver has driven."
                }
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of times each vehicle has been driven.",
            "Find the vehicle with the minimum count of times driven.",
            "Retrieve the ID of that vehicle."
        ],
        "db_id": "vehicle_driver",
        "id": 159,
        "generated_sql": "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "question": "Return the id of the vehicle that has been driven the fewest times.",
        "knowledge": {
            "tables": {
                "vehicle": {
                    "columns": [
                        "Vehicle_ID"
                    ],
                    "evidence": "Contains information about vehicles, including their unique identifier."
                },
                "driver": {
                    "columns": [
                        "Driver_ID"
                    ],
                    "evidence": "Contains information about drivers, including their unique identifier."
                },
                "vehicle_driver": {
                    "columns": [
                        "Driver_ID",
                        "Vehicle_ID"
                    ],
                    "relationships": {
                        "driver": {
                            "column": "Driver_ID",
                            "foreign_key": true
                        },
                        "vehicle": {
                            "column": "Vehicle_ID",
                            "foreign_key": true
                        }
                    },
                    "evidence": "Associative table linking drivers to vehicles, indicating which driver has driven which vehicle."
                }
            }
        },
        "label": "nested",
        "steps": [
            "Join the vehicle and vehicle_driver tables on the Vehicle_ID column.",
            "Group the results by Vehicle_ID and count the number of times each vehicle has been driven.",
            "Select the Vehicle_ID with the minimum count."
        ],
        "db_id": "vehicle_driver",
        "id": 160,
        "generated_sql": "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(Vehicle_ID) ASC LIMIT 1;"
    },
    {
        "question": "What is the top speed and power of the vehicle manufactured in the year of 1996?",
        "knowledge": {
            "tables": {
                "vehicle": {
                    "columns": [
                        "Top_Speed",
                        "Power"
                    ],
                    "filter": "Build_Year = '1996'",
                    "evidence": "Contains information about vehicles, including their top speed and power, as well as the year of manufacture."
                }
            }
        },
        "label": "simple",
        "steps": [
            "Select the top speed and power columns from the vehicle table.",
            "Filter the results where the Build_Year is '1996'."
        ],
        "db_id": "vehicle_driver",
        "id": 161,
        "generated_sql": "SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996';"
    },
    {
        "question": "Return the top speed and power of the vehicle that was built in the year 1996.",
        "knowledge": {
            "tables": {
                "vehicle": {
                    "columns": [
                        "Top_Speed",
                        "Power"
                    ],
                    "filter": "Build_Year = '1996'",
                    "evidence": "Contains information about vehicles, including their top speed and power, as well as the year of manufacture."
                }
            }
        },
        "label": "simple",
        "steps": [
            "Select the top speed and power columns from the vehicle table.",
            "Filter the results where the Build_Year is '1996'."
        ],
        "db_id": "vehicle_driver",
        "id": 162,
        "generated_sql": "SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996'"
    },
    {
        "question": "What are the build year, model name and builder of the vehicles?",
        "knowledge": {
            "tables": {
                "vehicle": {
                    "columns": [
                        "Build_Year",
                        "Model",
                        "Builder"
                    ],
                    "evidence": "Contains information about vehicles, including their build year, model name, and builder."
                }
            }
        },
        "label": "simple",
        "steps": [
            "Select the Build_Year, Model, and Builder columns from the vehicle table."
        ],
        "db_id": "vehicle_driver",
        "id": 163,
        "generated_sql": "SELECT Build_Year, Model, Builder FROM vehicle"
    },
    {
        "question": "Give the build year, model, and builder of each vehicle.",
        "knowledge": {
            "tables": {
                "vehicle": {
                    "columns": [
                        "Build_Year",
                        "Model",
                        "Builder"
                    ],
                    "evidence": "Contains information about vehicles, including their build year, model, and builder."
                }
            }
        },
        "label": "simple",
        "steps": [
            "Select the Build_Year, Model, and Builder columns from the vehicle table."
        ],
        "db_id": "vehicle_driver",
        "id": 164,
        "generated_sql": "SELECT Build_Year, Model, Builder FROM vehicle"
    },
    {
        "question": "How many drivers have driven vehicles built in 2012?",
        "knowledge": {
            "tables": {
                "vehicle": {
                    "columns": [
                        "Vehicle_ID"
                    ],
                    "filter": "Build_Year = '2012'",
                    "evidence": "Contains information about vehicles, including their build year."
                },
                "vehicle_driver": {
                    "columns": [
                        "Driver_ID"
                    ],
                    "relationships": {
                        "vehicle": {
                            "column": "Vehicle_ID",
                            "foreign_key": true
                        }
                    },
                    "evidence": "Associative table linking drivers to vehicles, indicating which driver has driven which vehicle."
                }
            }
        },
        "label": "nested",
        "steps": [
            "Select the Driver_ID column from the vehicle_driver table.",
            "Filter the results where the vehicles were built in 2012.",
            "Count the number of unique Driver_IDs."
        ],
        "db_id": "vehicle_driver",
        "id": 165,
        "generated_sql": "SELECT count(T3.Driver_ID) FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T1.Build_Year = '2012'"
    },
    {
        "question": "Count the number of different drivers who have driven vehicles built in 2012.",
        "knowledge": {
            "tables": {
                "vehicle": {
                    "columns": [
                        "Vehicle_ID"
                    ],
                    "filter": "Build_Year = '2012'",
                    "evidence": "Contains information about vehicles, including their build year."
                },
                "driver": {
                    "columns": [
                        "Driver_ID"
                    ],
                    "evidence": "Contains information about drivers, including their unique identifier."
                },
                "vehicle_driver": {
                    "columns": [
                        "Driver_ID"
                    ],
                    "relationships": {
                        "vehicle": {
                            "column": "Vehicle_ID",
                            "foreign_key": true
                        },
                        "driver": {
                            "column": "Driver_ID",
                            "foreign_key": true
                        }
                    },
                    "evidence": "Associative table linking drivers to vehicles, indicating which driver has driven which vehicle."
                }
            }
        },
        "label": "nested",
        "steps": [
            "Select the Driver_ID column from the vehicle_driver table.",
            "Join the vehicle_driver table with the vehicle table on the Vehicle_ID column.",
            "Filter the results to include only vehicles built in 2012.",
            "Count the number of unique Driver_IDs."
        ],
        "db_id": "vehicle_driver",
        "id": 166,
        "generated_sql": "SELECT COUNT(DISTINCT T1.Driver_ID) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.Build_Year = '2012';"
    },
    {
        "question": "How many drivers have raced in 'NASCAR'?",
        "knowledge": {
            "tables": {
                "driver": {
                    "columns": [
                        "Driver_ID"
                    ],
                    "filter": "Racing_Series = 'NASCAR'",
                    "evidence": "Contains information about drivers, including their racing series."
                }
            }
        },
        "label": "simple",
        "steps": [
            "Select the Driver_ID column from the driver table.",
            "Filter the results to include only drivers who have raced in 'NASCAR'.",
            "Count the number of records."
        ],
        "db_id": "vehicle_driver",
        "id": 167,
        "generated_sql": "SELECT COUNT(DISTINCT d.Driver_ID) FROM driver AS d JOIN vehicle_driver AS vd ON d.Driver_ID = vd.Driver_ID WHERE d.Racing_Series = 'NASCAR'"
    },
    {
        "question": "Count the number of drivers who have raced in NASCAR.",
        "knowledge": {
            "tables": {
                "driver": {
                    "columns": [
                        "Driver_ID"
                    ],
                    "filter": "Racing_Series = 'NASCAR'",
                    "evidence": "Contains information about drivers, including their racing series."
                }
            }
        },
        "label": "simple",
        "steps": [
            "Select the Driver_ID column from the driver table.",
            "Filter the results to include only drivers who have raced in NASCAR.",
            "Count the number of records."
        ],
        "db_id": "vehicle_driver",
        "id": 168,
        "generated_sql": "SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Racing_Series = 'NASCAR')"
    },
    {
        "question": "What is the average top speed of vehicles?",
        "knowledge": {
            "tables": {
                "vehicle": {
                    "columns": [
                        "Top_Speed"
                    ],
                    "evidence": "Contains information about vehicles, including their top speed."
                }
            }
        },
        "label": "simple",
        "steps": [
            "Select the Top_Speed column from the vehicle table.",
            "Calculate the average of the top speed values."
        ],
        "db_id": "vehicle_driver",
        "id": 169,
        "generated_sql": "SELECT AVG(Top_Speed) FROM vehicle"
    },
    {
        "question": "Return the average top speed across all vehicles.",
        "knowledge": {
            "vehicle": {
                "columns": [
                    "Vehicle_ID",
                    "Top_Speed"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Calculate the average top speed from the vehicle table"
        ],
        "db_id": "vehicle_driver",
        "id": 170,
        "generated_sql": "SELECT AVG(Top_Speed) FROM vehicle;"
    },
    {
        "question": "What are the distinct driver names who have driven vehicles with power more than 5000 ?",
        "knowledge": {
            "vehicle": {
                "columns": [
                    "Vehicle_ID",
                    "Power"
                ]
            },
            "driver": {
                "columns": [
                    "Driver_ID",
                    "Name"
                ]
            },
            "vehicle_driver": {
                "columns": [
                    "Driver_ID",
                    "Vehicle_ID"
                ]
            }
        },
        "label": "nested",
        "steps": [
            "Select Vehicle_IDs from the vehicle table where Power is more than 5000",
            "Join the vehicle_driver table on Vehicle_ID to find Driver_IDs",
            "Join the driver table on Driver_ID to find distinct driver names"
        ],
        "db_id": "vehicle_driver",
        "id": 171,
        "generated_sql": "SELECT DISTINCT D.Name FROM driver AS D JOIN vehicle_driver AS VD ON D.Driver_ID = VD.Driver_ID JOIN vehicle AS V ON V.Vehicle_ID = VD.Vehicle_ID WHERE V.Power > 5000"
    },
    {
        "question": "Return the names of drivers who have driven vehicles with power over 5000.",
        "knowledge": {
            "vehicle": {
                "columns": [
                    "Vehicle_ID",
                    "Power"
                ]
            },
            "driver": {
                "columns": [
                    "Driver_ID",
                    "Name"
                ]
            },
            "vehicle_driver": {
                "columns": [
                    "Driver_ID",
                    "Vehicle_ID"
                ]
            }
        },
        "label": "nested",
        "steps": [
            "Select Vehicle_IDs from the vehicle table where Power is over 5000",
            "Join the vehicle_driver table on Vehicle_ID to find Driver_IDs",
            "Join the driver table on Driver_ID to find the names of drivers"
        ],
        "db_id": "vehicle_driver",
        "id": 172,
        "generated_sql": "SELECT T2.Name FROM vehicle_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID JOIN vehicle AS T3 ON T3.Vehicle_ID = T1.Vehicle_ID WHERE T3.Power > 5000"
    },
    {
        "question": "Which car models have total production larger than 100 or top speed higher than 150?",
        "knowledge": {
            "vehicle": {
                "columns": [
                    "Model",
                    "Total_Production",
                    "Top_Speed"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Select car models from the vehicle table where total production is larger than 100 or top speed is higher than 150"
        ],
        "db_id": "vehicle_driver",
        "id": 173,
        "generated_sql": "SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150"
    },
    {
        "question": "Give the models of cars that have a total production of over 100 or a top speed over 150.",
        "knowledge": {
            "vehicle": {
                "columns": [
                    "Model",
                    "Total_Production",
                    "Top_Speed"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Select models from the vehicle table where total production is over 100 or top speed is over 150"
        ],
        "db_id": "vehicle_driver",
        "id": 174,
        "generated_sql": "SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150"
    },
    {
        "question": "What are the model names and build year of the cars with 'DJ' in its model name?",
        "knowledge": {
            "vehicle": {
                "columns": [
                    "Model",
                    "Build_Year"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Select model names and build year from the vehicle table where the model name contains 'DJ'"
        ],
        "db_id": "vehicle_driver",
        "id": 175,
        "generated_sql": "SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'"
    },
    {
        "question": "Return the model and build year of cars that include \"DJ\" in their model names.",
        "knowledge": {
            "vehicle": {
                "columns": [
                    "Model",
                    "Build_Year"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Select model and build year from the vehicle table where the model name contains 'DJ'"
        ],
        "db_id": "vehicle_driver",
        "id": 176,
        "generated_sql": "SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'"
    },
    {
        "question": "What are the models which have not been driven by any drivers?",
        "knowledge": {
            "vehicle": {
                "columns": [
                    "Model"
                ]
            },
            "vehicle_driver": {
                "columns": [
                    "Vehicle_ID"
                ]
            }
        },
        "label": "nested",
        "steps": [
            "Select models from the vehicle table that do not have corresponding entries in the vehicle_driver table"
        ],
        "db_id": "vehicle_driver",
        "id": 177,
        "generated_sql": "SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)"
    },
    {
        "question": "Return the models of vehicles that have never been driven.",
        "knowledge": {
            "vehicle": {
                "columns": [
                    "Model"
                ]
            },
            "vehicle_driver": {
                "columns": [
                    "Vehicle_ID"
                ]
            }
        },
        "label": "nested",
        "steps": [
            "Select models from the vehicle table that do not have corresponding entries in the vehicle_driver table"
        ],
        "db_id": "vehicle_driver",
        "id": 178,
        "generated_sql": "SELECT Model FROM vehicle EXCEPT SELECT T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID  =  T2.Vehicle_ID"
    },
    {
        "question": "What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.",
        "knowledge": {
            "vehicle": {
                "columns": [
                    "Vehicle_ID",
                    "Model",
                    "Builder"
                ]
            },
            "vehicle_driver": {
                "columns": [
                    "Vehicle_ID"
                ]
            }
        },
        "label": "nested",
        "steps": [
            "Select vehicle ids and models from the vehicle table where the vehicle has been driven by two drivers or manufactured by 'Ziyang'"
        ],
        "db_id": "vehicle_driver",
        "id": 179,
        "generated_sql": "SELECT T3.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID GROUP BY T3.Vehicle_ID HAVING COUNT(T2.Vehicle_ID) >= 2 OR T1.Builder = 'Ziyang'"
    },
    {
        "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.",
        "knowledge": {
            "vehicle": {
                "columns": [
                    "Vehicle_ID",
                    "Model",
                    "Builder"
                ]
            },
            "vehicle_driver": {
                "columns": [
                    "Vehicle_ID"
                ]
            }
        },
        "label": "nested",
        "steps": [
            "Select vehicle ids and models from the vehicle table where the vehicle has been driven by exactly two drivers or built by Ziyang"
        ],
        "db_id": "vehicle_driver",
        "id": 180,
        "generated_sql": "SELECT T1.Model, T1.Vehicle_ID FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T1.Builder = 'Zhuzhou' OR (SELECT COUNT(*) FROM vehicle_driver WHERE T2.Vehicle_ID = vehicle_driver.Vehicle_ID) = 2"
    },
    {
        "question": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?",
        "knowledge": {
            "vehicle": {
                "columns": [
                    "Vehicle_ID",
                    "Model"
                ]
            },
            "driver": {
                "columns": [
                    "Driver_ID",
                    "Name"
                ]
            },
            "vehicle_driver": {
                "columns": [
                    "Vehicle_ID"
                ]
            }
        },
        "label": "nested",
        "steps": [
            "Select vehicle ids and models from the vehicle table where the vehicle has been driven by more than 2 drivers or driven by the driver named 'Jeff Gordon'"
        ],
        "db_id": "vehicle_driver",
        "id": 181,
        "generated_sql": "SELECT v.Vehicle_ID, v.Model FROM vehicle v JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY vd.Vehicle_ID HAVING COUNT(vd.Driver_ID) > 2 OR vd.Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon')"
    },
    {
        "question": "Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.",
        "knowledge": {
            "vehicle": {
                "columns": [
                    "Vehicle_ID",
                    "Model"
                ]
            },
            "driver": {
                "columns": [
                    "Name"
                ]
            },
            "vehicle_driver": {
                "columns": [
                    "Vehicle_ID"
                ]
            }
        },
        "label": "nested",
        "steps": [
            "Select vehicle ids and models from the vehicle table where the vehicle has been driven by more than 2 drivers or driven by Jeff Gordon"
        ],
        "db_id": "vehicle_driver",
        "id": 182,
        "generated_sql": "SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID  =  T2.Vehicle_ID JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T3.Name = 'Jeff Gordon' OR (SELECT COUNT(*) FROM vehicle_driver WHERE Vehicle_ID = T1.Vehicle_ID) > 2"
    },
    {
        "question": "How many vehicles have maximum top speed?",
        "knowledge": {
            "vehicle": {
                "columns": [
                    "Vehicle_ID",
                    "Top_Speed"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of vehicles in the vehicle table that have the maximum top speed"
        ],
        "db_id": "vehicle_driver",
        "id": 183,
        "generated_sql": "SELECT count(*) FROM vehicle WHERE top_speed = (SELECT max(top_speed) FROM vehicle)"
    },
    {
        "question": "Count the number of vehicles that have a top speed equal to the maximum across all vehicles.",
        "knowledge": {
            "vehicle": {
                "columns": [
                    "Vehicle_ID",
                    "Top_Speed"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Find the maximum top speed across all vehicles",
            "Count the number of vehicles with a top speed equal to the maximum"
        ],
        "db_id": "vehicle_driver",
        "id": 184,
        "generated_sql": "SELECT COUNT(Vehicle_ID) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle)"
    },
    {
        "question": "Show all driver names in the alphabetical order.",
        "knowledge": {
            "driver": {
                "columns": [
                    "Name"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve all driver names from the 'driver' table",
            "Order the names alphabetically"
        ],
        "db_id": "vehicle_driver",
        "id": 185,
        "generated_sql": "SELECT Name FROM driver ORDER BY Name"
    },
    {
        "question": "What are the names of drivers, returned in alphbetical order?",
        "knowledge": {
            "driver": {
                "columns": [
                    "Name"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve all driver names from the 'driver' table",
            "Order the names alphabetically"
        ],
        "db_id": "vehicle_driver",
        "id": 186,
        "generated_sql": "SELECT Name FROM driver ORDER BY Name ASC;"
    },
    {
        "question": "How many drivers have been racing in each racing series?",
        "knowledge": {
            "driver": {
                "columns": [
                    "Racing_Series"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of drivers for each distinct racing series in the 'driver' table"
        ],
        "db_id": "vehicle_driver",
        "id": 187,
        "generated_sql": "SELECT Racing_Series, COUNT(*) as Number_of_Drivers FROM driver GROUP BY Racing_Series"
    },
    {
        "question": "Count the number of drivers that have raced in each series.",
        "knowledge": {
            "driver": {
                "columns": [
                    "Racing_Series"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of drivers for each distinct racing series in the 'driver' table"
        ],
        "db_id": "vehicle_driver",
        "id": 188,
        "generated_sql": "SELECT Racing_Series, COUNT(Driver_ID)  FROM driver  GROUP BY Racing_Series"
    },
    {
        "question": "What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?",
        "knowledge": {
            "vehicle": {
                "columns": [
                    "Model"
                ]
            },
            "driver": {
                "columns": [
                    "Name",
                    "Citizenship"
                ]
            },
            "vehicle_driver": {
                "foreign_keys": {
                    "Driver_ID": "driver.Driver_ID",
                    "Vehicle_ID": "vehicle.Vehicle_ID"
                }
            }
        },
        "label": "nested",
        "steps": [
            "Retrieve the Driver_ID associated with the vehicle model 'DJ1' from the 'vehicle' table",
            "Use the retrieved Driver_ID to get the name and citizenship of the drivers from the 'driver' table"
        ],
        "db_id": "vehicle_driver",
        "id": 189,
        "generated_sql": "SELECT T1.Name ,  T1.Citizenship FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID INNER JOIN vehicle AS T3 ON T3.Vehicle_ID  =  T2.Vehicle_ID WHERE T3.Model  =  'DJ'"
    },
    {
        "question": "Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.",
        "knowledge": {
            "vehicle": {
                "columns": [
                    "Vehicle_ID",
                    "Model"
                ]
            },
            "driver": {
                "columns": [
                    "Driver_ID",
                    "Name",
                    "Citizenship"
                ]
            },
            "vehicle_driver": {
                "foreign_keys": {
                    "Vehicle_ID": "vehicle.Vehicle_ID",
                    "Driver_ID": "driver.Driver_ID"
                }
            }
        },
        "label": "nested",
        "steps": [
            "Retrieve the Driver_IDs of drivers who have driven the vehicle with the model 'DJ1' from the 'vehicle_driver' table using a SELECT query with a JOIN condition on 'vehicle' table to filter by model 'DJ1'",
            "Join the result with the 'driver' table on the Driver_ID to obtain the names and citizenships of the drivers"
        ],
        "db_id": "vehicle_driver",
        "id": 190,
        "generated_sql": "SELECT d.Name, d.Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON v.Vehicle_ID = vd.Vehicle_ID WHERE v.Model = 'DJ1'"
    },
    {
        "question": "How many drivers have not driven any cars?",
        "knowledge": {
            "driver": {
                "columns": [
                    "Driver_ID"
                ]
            },
            "vehicle_driver": {
                "columns": [
                    "Driver_ID"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of distinct Driver_IDs from the 'driver' table that do not exist in the 'vehicle_driver' table"
        ],
        "db_id": "vehicle_driver",
        "id": 191,
        "generated_sql": "SELECT COUNT(DISTINCT Driver_ID) FROM driver EXCEPT SELECT DISTINCT Driver_ID FROM vehicle_driver"
    },
    {
        "question": "Count the number of drivers who have not driven any vehicles.",
        "knowledge": {
            "driver": {
                "columns": [
                    "Driver_ID"
                ]
            },
            "vehicle_driver": {
                "columns": [
                    "Driver_ID"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of distinct Driver_IDs from the 'driver' table that do not exist in the 'vehicle_driver' table"
        ],
        "db_id": "vehicle_driver",
        "id": 192,
        "generated_sql": "SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)"
    },
    {
        "question": "How many exams are there?",
        "knowledge": {
            "Exams": {
                "columns": [
                    "Exam_ID"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of distinct Exam_IDs from the 'Exams' table"
        ],
        "db_id": "online_exams",
        "id": 193,
        "generated_sql": "SELECT count(Exam_ID) FROM Exams"
    },
    {
        "question": "Count the number of exams.",
        "knowledge": {
            "Exams": {
                "columns": [
                    "Exam_ID"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Count the number of distinct Exam_IDs from the 'Exams' table"
        ],
        "db_id": "online_exams",
        "id": 194,
        "generated_sql": "SELECT COUNT(DISTINCT Exam_ID) FROM Exams"
    },
    {
        "question": "List the distinct subject code of exams in ascending alphabetical order .",
        "knowledge": {
            "Exams": {
                "columns": [
                    "Subject_Code"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Subject_Code' column from the 'Exams' table.",
            "Remove duplicates from the 'Subject_Code' column.",
            "Sort the distinct 'Subject_Code' values in ascending alphabetical order."
        ],
        "db_id": "online_exams",
        "id": 195,
        "generated_sql": "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC"
    },
    {
        "question": "Give me an alphabetically ordered list of the distinct subject code for exams.",
        "knowledge": {
            "Exams": {
                "columns": [
                    "Subject_Code"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Subject_Code' column from the 'Exams' table.",
            "Remove duplicates from the 'Subject_Code' column.",
            "Sort the distinct 'Subject_Code' values in alphabetical order."
        ],
        "db_id": "online_exams",
        "id": 196,
        "generated_sql": "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC;"
    },
    {
        "question": "What are the names and dates of the exams with subject code that is not \"Database\"?",
        "knowledge": {
            "Exams": {
                "columns": [
                    "Exam_Name",
                    "Exam_Date"
                ],
                "condition": "Subject_Code <> 'Database'"
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Exam_Name' and 'Exam_Date' columns from the 'Exams' table.",
            "Filter the exams where the 'Subject_Code' is not equal to 'Database'."
        ],
        "db_id": "online_exams",
        "id": 197,
        "generated_sql": "SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code <> 'Database'"
    },
    {
        "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?",
        "knowledge": {
            "Exams": {
                "columns": [
                    "Exam_Date",
                    "Exam_Name"
                ],
                "condition": "Subject_Code <> 'Database'"
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Exam_Date' and 'Exam_Name' columns from the 'Exams' table.",
            "Filter the exams where the 'Subject_Code' is not equal to 'Database'."
        ],
        "db_id": "online_exams",
        "id": 198,
        "generated_sql": "SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code <> 'Database'"
    },
    {
        "question": "List the dates of the exams with subject code containing the word \"data\", in descending order of dates.",
        "knowledge": {
            "Exams": {
                "columns": [
                    "Exam_Date"
                ],
                "condition": "Subject_Code LIKE '%data%'",
                "order": "Exam_Date DESC"
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Exam_Date' column from the 'Exams' table.",
            "Filter the exams where the 'Subject_Code' contains the word 'data'.",
            "Order the results in descending order based on the 'Exam_Date'."
        ],
        "db_id": "online_exams",
        "id": 199,
        "generated_sql": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC"
    },
    {
        "question": "What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.",
        "knowledge": {
            "Exams": {
                "columns": [
                    "Exam_Date"
                ],
                "condition": "Subject_Code LIKE '%data%'",
                "order": "Exam_Date DESC"
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Exam_Date' column from the 'Exams' table.",
            "Filter the exams where the 'Subject_Code' contains the substring 'data'.",
            "Order the results in descending order based on the 'Exam_Date'."
        ],
        "db_id": "online_exams",
        "id": 200,
        "generated_sql": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC"
    },
    {
        "question": "What are the type of questions and their counts?",
        "knowledge": {
            "Questions": {
                "columns": [
                    "Type_of_Question_Code",
                    "COUNT(*) AS Question_Count"
                ],
                "group_by": "Type_of_Question_Code"
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Type_of_Question_Code' column from the 'Questions' table.",
            "Count the number of occurrences for each type of question.",
            "Group the results by 'Type_of_Question_Code'."
        ],
        "db_id": "online_exams",
        "id": 201,
        "generated_sql": "SELECT Type_of_Question_Code ,  COUNT(*) AS Question_Count FROM Questions GROUP BY Type_of_Question_Code"
    },
    {
        "question": "For each question type, return its type code and its count of occurrence.",
        "knowledge": {
            "Questions": {
                "columns": [
                    "Type_of_Question_Code",
                    "COUNT(*) AS Occurrence_Count"
                ],
                "group_by": "Type_of_Question_Code"
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Type_of_Question_Code' column from the 'Questions' table.",
            "Count the number of occurrences for each type of question.",
            "Group the results by 'Type_of_Question_Code'."
        ],
        "db_id": "online_exams",
        "id": 202,
        "generated_sql": "SELECT Type_of_Question_Code, COUNT(*) AS Occurrence_Count FROM Questions GROUP BY Type_of_Question_Code"
    },
    {
        "question": "What are the distinct student answer texts that received comments \"Normal\"?",
        "knowledge": {
            "Student_Answers": {
                "columns": [
                    "DISTINCT Student_Answer_Text"
                ],
                "conditions": [
                    "Comments = 'Normal'"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Student_Answer_Text' column from the 'Student_Answers' table.",
            "Select only distinct values of 'Student_Answer_Text'.",
            "Filter the results where 'Comments' is 'Normal'."
        ],
        "db_id": "online_exams",
        "id": 203,
        "generated_sql": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'"
    },
    {
        "question": "List all the distinct student answer texts to which comments \"Normal\" were given?",
        "knowledge": {
            "Student_Answers": {
                "columns": [
                    "DISTINCT Student_Answer_Text"
                ],
                "conditions": [
                    "Comments = 'Normal'"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Student_Answer_Text' column from the 'Student_Answers' table.",
            "Select only distinct values of 'Student_Answer_Text'.",
            "Filter the results where 'Comments' is 'Normal'."
        ],
        "db_id": "online_exams",
        "id": 204,
        "generated_sql": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal';"
    },
    {
        "question": "How many different comments are there for student answers?",
        "knowledge": {
            "Student_Answers": {
                "columns": [
                    "DISTINCT Comments"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Comments' column from the 'Student_Answers' table.",
            "Select only distinct values of 'Comments'.",
            "Count the number of distinct comments."
        ],
        "db_id": "online_exams",
        "id": 205,
        "generated_sql": "SELECT COUNT(DISTINCT `Comments`) FROM `Student_Answers`"
    },
    {
        "question": "Count the number of different comments for student answers.",
        "knowledge": {
            "Student_Answers": {
                "columns": [
                    "COUNT(DISTINCT Comments)"
                ]
            }
        },
        "label": "simple",
        "steps": [
            "Retrieve the 'Comments' column from the 'Student_Answers' table.",
            "Select only distinct values of 'Comments'.",
            "Count the number of distinct comments."
        ],
        "db_id": "online_exams",
        "id": 206,
        "generated_sql": "SELECT COUNT(DISTINCT Comments) FROM Student_Answers"
    },
    {
        "question": "List all the student answer texts in descending order of count.",
        "knowledge": {
            "Student_Answers": {
                "columns": [
                    "Student_Answer_Text",
                    "COUNT(Student_Answer_Text)"
                ],
                "group_by": [
                    "Student_Answer_Text"
                ],
                "order_by": "COUNT(Student_Answer_Text) DESC"
            }
        },
        "label": "simple",
        "steps": [
            "Group the rows in the 'Student_Answers' table by 'Student_Answer_Text'.",
            "Count the occurrences of each 'Student_Answer_Text'.",
            "Sort the results in descending order based on the count of each 'Student_Answer_Text'."
        ],
        "db_id": "online_exams",
        "id": 207,
        "generated_sql": "SELECT Student_Answer_Text ,  COUNT(Student_Answer_Text) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(Student_Answer_Text) DESC"
    },
    {
        "question": "Sort the student answer texts in descending order of their frequency of occurrence.",
        "knowledge": {
            "Student_Answers": {
                "columns": [
                    "Student_Answer_Text",
                    "COUNT(Student_Answer_Text)"
                ],
                "group_by": [
                    "Student_Answer_Text"
                ],
                "order_by": "COUNT(Student_Answer_Text) DESC"
            }
        },
        "label": "simple",
        "steps": [
            "Group the rows in the 'Student_Answers' table by 'Student_Answer_Text'.",
            "Count the occurrences of each 'Student_Answer_Text'.",
            "Sort the results in descending order based on the count of each 'Student_Answer_Text'."
        ],
        "db_id": "online_exams",
        "id": 208,
        "generated_sql": "SELECT Student_Answer_Text ,  COUNT(Student_Answer_Text) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(Student_Answer_Text) DESC"
    },
    {
        "question": "Please show the first names of students and the dates of their answers.",
        "knowledge": {
            "Students": {
                "columns": [
                    "First_Name",
                    "Student_ID"
                ]
            },
            "Student_Answers": {
                "columns": [
                    "Date_of_Answer",
                    "Student_ID"
                ],
                "join": [
                    "Students.Student_ID = Student_Answers.Student_ID"
                ]
            }
        },
        "label": "nested",
        "steps": [
            "Retrieve the first names of students from the 'Students' table.",
            "Retrieve the dates of their answers from the 'Student_Answers' table.",
            "Join the 'Students' and 'Student_Answers' tables on 'Student_ID'."
        ],
        "db_id": "online_exams",
        "id": 209,
        "generated_sql": "SELECT s.First_Name, sa.Date_of_Answer FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID"
    }
]